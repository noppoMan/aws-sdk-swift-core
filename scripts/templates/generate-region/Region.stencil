//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift-core/scripts/generate-region.swift. DO NOT EDIT.

public enum Region {
{%for region in regions %}
    case {{region.enum}} // {{region.description}}
{%endfor %}
    case other(name: String, dnsSuffix: String)
}

extension Region {

    public init(rawValue: String) {
        switch rawValue {
{%for region in regions %}
        case "{{region.name}}": self = .{{region.enum}}
{%endfor %}
        default: self = .other(name: rawValue, dnsSuffix: "amazonaws.com")
        }
    }

    public var rawValue: String {
        switch self {
{%for region in regions %}
        case .{{region.enum}}: return "{{region.name}}"
{%endfor %}
        case .other(let string, _): return string
        }
    }

    public var dnsSuffix: String {
        switch self {
{%for region in regions %}
        case .{{region.enum}}: return "{{region.dnsSuffix}}"
{%endfor %}
        case .other(_, let dnsSuffix): return dnsSuffix
        }
    }
}

extension Region: Equatable, Hashable {
    public static func == (lhs: Region, rhs: Region) -> Bool {
        lhs.rawValue == rhs.rawValue
    }

    public func hash(into hasher: inout Hasher) {
        self.rawValue.hash(into: &hasher)
    }
}
