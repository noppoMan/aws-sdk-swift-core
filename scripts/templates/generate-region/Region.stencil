//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift-core/scripts/generate-region.swift. DO NOT EDIT.

public struct Region: RawRepresentable, Equatable {
    public var rawValue: String

    public init(rawValue: String) {
        self.rawValue = rawValue
    }

{%for region in regions %}
    // {{region.description}}
    public static var {{region.enum}}: Region { .init(rawValue: "{{region.name}}") }
{%endfor %}
    // other region
    public static func other(_ name: String) -> Region { .init(rawValue: name) }
}

extension Region {

    public var partition: Partition {
        switch self.rawValue {
{%for region in regions %}
        case "{{region.enum}}": return .{{region.partition}}
{%endfor %}
        default: return .aws
        }
    }
}

public struct Partition {
    enum InternalPartition: String {
{%for partition in partitions %}
        case {{partition.name}}
{%endfor %}
    }
    private var partition: InternalPartition
    public var rawValue: String { return partition.rawValue }

{%for partition in partitions %}
    // {{partition.description}}
    public static var {{partition.name}}: Partition { .init(partition: .{{partition.name}}) }
{%endfor %}
}

extension Partition: Equatable, Hashable { }

extension Partition {
    public var dnsSuffix: String {
        switch self.partition {
{%for partition in partitions %}
        case .{{partition.name}}: return "{{partition.dnsSuffix}}"
{%endfor %}
        }
    }
}
