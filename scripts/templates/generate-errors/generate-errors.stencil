//===----------------------------------------------------------------------===//
//
// This source file is part of the Soto for AWS open source project
//
// Copyright (c) 2017-2020 the Soto project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of Soto project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/soto-project/soto-core/scripts/generate-errors.swift. DO NOT EDIT.

import NIOHTTP1

public struct {{name}}: AWSErrorType {
    enum Code: String {
{%for error in errors %}
        case {{error.enum}} = "{{error.name}}"
{%endfor %}
    }
    private var error: Code
    public var message: String?
    public var statusCode: HTTPResponseStatus?
    public var requestId: String?

    public init?(errorCode: String, message: String?, statusCode: HTTPResponseStatus? = nil, requestId: String? = nil) {
        var errorCode = errorCode
        // remove "Exception" suffix
        if errorCode.hasSuffix("Exception") {
            errorCode = String(errorCode.dropLast(9))
        }
        guard let error = Code(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
        self.statusCode = statusCode
        self.requestId = nil
    }
    
    internal init(_ error: Code) {
        self.error = error
        self.message = nil
        self.statusCode = nil
        self.requestId = nil
    }

{%for error in errors %}
    // {{error.description}}
    public static var {{error.enum}}:{{name}} { .init(.{{error.enum}}) }
{%endfor %}
}

extension {{name}}: Equatable {
    public static func == (lhs: {{name}}, rhs: {{name}}) -> Bool {
        lhs.error == rhs.error
    }
}

extension {{name}} : CustomStringConvertible {
    public var description: String {
        return "\(error.rawValue): \(message ?? "")"
    }
}
