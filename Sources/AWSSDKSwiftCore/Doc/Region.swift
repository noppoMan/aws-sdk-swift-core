//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift-core/scripts/generate-region.swift. DO NOT EDIT.

public enum Region {
    case afsouth1 // Africa (Cape Town)
    case apeast1 // Asia Pacific (Hong Kong)
    case apnortheast1 // Asia Pacific (Tokyo)
    case apnortheast2 // Asia Pacific (Seoul)
    case apsouth1 // Asia Pacific (Mumbai)
    case apsoutheast1 // Asia Pacific (Singapore)
    case apsoutheast2 // Asia Pacific (Sydney)
    case cacentral1 // Canada (Central)
    case cnnorth1 // China (Beijing)
    case cnnorthwest1 // China (Ningxia)
    case eucentral1 // EU (Frankfurt)
    case eunorth1 // EU (Stockholm)
    case euwest1 // EU (Ireland)
    case euwest2 // EU (London)
    case euwest3 // EU (Paris)
    case mesouth1 // Middle East (Bahrain)
    case saeast1 // South America (Sao Paulo)
    case useast1 // US East (N. Virginia)
    case useast2 // US East (Ohio)
    case usgoveast1 // AWS GovCloud (US-East)
    case usgovwest1 // AWS GovCloud (US)
    case usisoeast1 // US ISO East
    case usisobeast1 // US ISOB East (Ohio)
    case uswest1 // US West (N. California)
    case uswest2 // US West (Oregon)
    case other(String)
}

extension Region {
    public init(rawValue: String) {
        switch rawValue {
        case "af-south-1": self = .afsouth1
        case "ap-east-1": self = .apeast1
        case "ap-northeast-1": self = .apnortheast1
        case "ap-northeast-2": self = .apnortheast2
        case "ap-south-1": self = .apsouth1
        case "ap-southeast-1": self = .apsoutheast1
        case "ap-southeast-2": self = .apsoutheast2
        case "ca-central-1": self = .cacentral1
        case "cn-north-1": self = .cnnorth1
        case "cn-northwest-1": self = .cnnorthwest1
        case "eu-central-1": self = .eucentral1
        case "eu-north-1": self = .eunorth1
        case "eu-west-1": self = .euwest1
        case "eu-west-2": self = .euwest2
        case "eu-west-3": self = .euwest3
        case "me-south-1": self = .mesouth1
        case "sa-east-1": self = .saeast1
        case "us-east-1": self = .useast1
        case "us-east-2": self = .useast2
        case "us-gov-east-1": self = .usgoveast1
        case "us-gov-west-1": self = .usgovwest1
        case "us-iso-east-1": self = .usisoeast1
        case "us-isob-east-1": self = .usisobeast1
        case "us-west-1": self = .uswest1
        case "us-west-2": self = .uswest2
        default: self = .other(rawValue)
        }
    }

    public var rawValue: String {
        switch self {
        case .afsouth1: return "af-south-1"
        case .apeast1: return "ap-east-1"
        case .apnortheast1: return "ap-northeast-1"
        case .apnortheast2: return "ap-northeast-2"
        case .apsouth1: return "ap-south-1"
        case .apsoutheast1: return "ap-southeast-1"
        case .apsoutheast2: return "ap-southeast-2"
        case .cacentral1: return "ca-central-1"
        case .cnnorth1: return "cn-north-1"
        case .cnnorthwest1: return "cn-northwest-1"
        case .eucentral1: return "eu-central-1"
        case .eunorth1: return "eu-north-1"
        case .euwest1: return "eu-west-1"
        case .euwest2: return "eu-west-2"
        case .euwest3: return "eu-west-3"
        case .mesouth1: return "me-south-1"
        case .saeast1: return "sa-east-1"
        case .useast1: return "us-east-1"
        case .useast2: return "us-east-2"
        case .usgoveast1: return "us-gov-east-1"
        case .usgovwest1: return "us-gov-west-1"
        case .usisoeast1: return "us-iso-east-1"
        case .usisobeast1: return "us-isob-east-1"
        case .uswest1: return "us-west-1"
        case .uswest2: return "us-west-2"
        case .other(let string): return string
        }
    }

    public var partition: Partition {
        switch self {
        case .afsouth1: return .aws
        case .apeast1: return .aws
        case .apnortheast1: return .aws
        case .apnortheast2: return .aws
        case .apsouth1: return .aws
        case .apsoutheast1: return .aws
        case .apsoutheast2: return .aws
        case .cacentral1: return .aws
        case .cnnorth1: return .awscn
        case .cnnorthwest1: return .awscn
        case .eucentral1: return .aws
        case .eunorth1: return .aws
        case .euwest1: return .aws
        case .euwest2: return .aws
        case .euwest3: return .aws
        case .mesouth1: return .aws
        case .saeast1: return .aws
        case .useast1: return .aws
        case .useast2: return .aws
        case .usgoveast1: return .awsusgov
        case .usgovwest1: return .awsusgov
        case .usisoeast1: return .awsiso
        case .usisobeast1: return .awsisob
        case .uswest1: return .aws
        case .uswest2: return .aws
        case .other(_): return .aws
        }
    }
}

extension Region: Equatable, Hashable {
    public static func == (lhs: Region, rhs: Region) -> Bool {
        lhs.rawValue == rhs.rawValue
    }

    public func hash(into hasher: inout Hasher) {
        self.rawValue.hash(into: &hasher)
    }
}

public enum Partition: String {
    case aws // AWS Standard
    case awscn // AWS China
    case awsusgov // AWS GovCloud (US)
    case awsiso // AWS ISO (US)
    case awsisob // AWS ISOB (US)
}

extension Partition {
    public var dnsSuffix: String {
        switch self {
        case .aws: return "amazonaws.com"
        case .awscn: return "amazonaws.com.cn"
        case .awsusgov: return "amazonaws.com"
        case .awsiso: return "c2s.ic.gov"
        case .awsisob: return "sc2s.sgov.gov"
        }
    }
}
