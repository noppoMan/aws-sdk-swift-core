//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift-core/scripts/generate-region.swift. DO NOT EDIT.

public struct Region {
    private enum InternalRegion {
        case afsouth1
        case apeast1
        case apnortheast1
        case apnortheast2
        case apsouth1
        case apsoutheast1
        case apsoutheast2
        case cacentral1
        case cnnorth1
        case cnnorthwest1
        case eucentral1
        case eunorth1
        case eusouth1
        case euwest1
        case euwest2
        case euwest3
        case mesouth1
        case saeast1
        case useast1
        case useast2
        case usgoveast1
        case usgovwest1
        case usisoeast1
        case usisobeast1
        case uswest1
        case uswest2
        case other(String)
    }
    
    private var region: InternalRegion

    // Africa (Cape Town)
    public static let afsouth1 = Region(region: .afsouth1)
    // Asia Pacific (Hong Kong)
    public static let apeast1 = Region(region: .apeast1)
    // Asia Pacific (Tokyo)
    public static let apnortheast1 = Region(region: .apnortheast1)
    // Asia Pacific (Seoul)
    public static let apnortheast2 = Region(region: .apnortheast2)
    // Asia Pacific (Mumbai)
    public static let apsouth1 = Region(region: .apsouth1)
    // Asia Pacific (Singapore)
    public static let apsoutheast1 = Region(region: .apsoutheast1)
    // Asia Pacific (Sydney)
    public static let apsoutheast2 = Region(region: .apsoutheast2)
    // Canada (Central)
    public static let cacentral1 = Region(region: .cacentral1)
    // China (Beijing)
    public static let cnnorth1 = Region(region: .cnnorth1)
    // China (Ningxia)
    public static let cnnorthwest1 = Region(region: .cnnorthwest1)
    // Europe (Frankfurt)
    public static let eucentral1 = Region(region: .eucentral1)
    // Europe (Stockholm)
    public static let eunorth1 = Region(region: .eunorth1)
    // Europe (Milan)
    public static let eusouth1 = Region(region: .eusouth1)
    // Europe (Ireland)
    public static let euwest1 = Region(region: .euwest1)
    // Europe (London)
    public static let euwest2 = Region(region: .euwest2)
    // Europe (Paris)
    public static let euwest3 = Region(region: .euwest3)
    // Middle East (Bahrain)
    public static let mesouth1 = Region(region: .mesouth1)
    // South America (Sao Paulo)
    public static let saeast1 = Region(region: .saeast1)
    // US East (N. Virginia)
    public static let useast1 = Region(region: .useast1)
    // US East (Ohio)
    public static let useast2 = Region(region: .useast2)
    // AWS GovCloud (US-East)
    public static let usgoveast1 = Region(region: .usgoveast1)
    // AWS GovCloud (US-West)
    public static let usgovwest1 = Region(region: .usgovwest1)
    // US ISO East
    public static let usisoeast1 = Region(region: .usisoeast1)
    // US ISOB East (Ohio)
    public static let usisobeast1 = Region(region: .usisobeast1)
    // US West (N. California)
    public static let uswest1 = Region(region: .uswest1)
    // US West (Oregon)
    public static let uswest2 = Region(region: .uswest2)
    // other region
    public static func other(_ name: String) -> Region { Region(region: .other(name)) }
}

extension Region {
    public init(rawValue: String) {
        switch rawValue {
        case "af-south-1": self = .afsouth1
        case "ap-east-1": self = .apeast1
        case "ap-northeast-1": self = .apnortheast1
        case "ap-northeast-2": self = .apnortheast2
        case "ap-south-1": self = .apsouth1
        case "ap-southeast-1": self = .apsoutheast1
        case "ap-southeast-2": self = .apsoutheast2
        case "ca-central-1": self = .cacentral1
        case "cn-north-1": self = .cnnorth1
        case "cn-northwest-1": self = .cnnorthwest1
        case "eu-central-1": self = .eucentral1
        case "eu-north-1": self = .eunorth1
        case "eu-south-1": self = .eusouth1
        case "eu-west-1": self = .euwest1
        case "eu-west-2": self = .euwest2
        case "eu-west-3": self = .euwest3
        case "me-south-1": self = .mesouth1
        case "sa-east-1": self = .saeast1
        case "us-east-1": self = .useast1
        case "us-east-2": self = .useast2
        case "us-gov-east-1": self = .usgoveast1
        case "us-gov-west-1": self = .usgovwest1
        case "us-iso-east-1": self = .usisoeast1
        case "us-isob-east-1": self = .usisobeast1
        case "us-west-1": self = .uswest1
        case "us-west-2": self = .uswest2
        default: self = .other(rawValue)
        }
    }

    public var rawValue: String {
        switch self.region {
        case .afsouth1: return "af-south-1"
        case .apeast1: return "ap-east-1"
        case .apnortheast1: return "ap-northeast-1"
        case .apnortheast2: return "ap-northeast-2"
        case .apsouth1: return "ap-south-1"
        case .apsoutheast1: return "ap-southeast-1"
        case .apsoutheast2: return "ap-southeast-2"
        case .cacentral1: return "ca-central-1"
        case .cnnorth1: return "cn-north-1"
        case .cnnorthwest1: return "cn-northwest-1"
        case .eucentral1: return "eu-central-1"
        case .eunorth1: return "eu-north-1"
        case .eusouth1: return "eu-south-1"
        case .euwest1: return "eu-west-1"
        case .euwest2: return "eu-west-2"
        case .euwest3: return "eu-west-3"
        case .mesouth1: return "me-south-1"
        case .saeast1: return "sa-east-1"
        case .useast1: return "us-east-1"
        case .useast2: return "us-east-2"
        case .usgoveast1: return "us-gov-east-1"
        case .usgovwest1: return "us-gov-west-1"
        case .usisoeast1: return "us-iso-east-1"
        case .usisobeast1: return "us-isob-east-1"
        case .uswest1: return "us-west-1"
        case .uswest2: return "us-west-2"
        case .other(let string): return string
        }
    }

    public var partition: Partition {
        switch self.region {
        case .afsouth1: return .aws
        case .apeast1: return .aws
        case .apnortheast1: return .aws
        case .apnortheast2: return .aws
        case .apsouth1: return .aws
        case .apsoutheast1: return .aws
        case .apsoutheast2: return .aws
        case .cacentral1: return .aws
        case .cnnorth1: return .awscn
        case .cnnorthwest1: return .awscn
        case .eucentral1: return .aws
        case .eunorth1: return .aws
        case .eusouth1: return .aws
        case .euwest1: return .aws
        case .euwest2: return .aws
        case .euwest3: return .aws
        case .mesouth1: return .aws
        case .saeast1: return .aws
        case .useast1: return .aws
        case .useast2: return .aws
        case .usgoveast1: return .awsusgov
        case .usgovwest1: return .awsusgov
        case .usisoeast1: return .awsiso
        case .usisobeast1: return .awsisob
        case .uswest1: return .aws
        case .uswest2: return .aws
        case .other(_): return .aws
        }
    }
}

extension Region: Equatable, Hashable {
    public static func == (lhs: Region, rhs: Region) -> Bool {
        lhs.rawValue == rhs.rawValue
    }

    public func hash(into hasher: inout Hasher) {
        self.rawValue.hash(into: &hasher)
    }
}

public struct Partition {
    enum InternalPartition: String {
        case aws
        case awscn
        case awsusgov
        case awsiso
        case awsisob
    }
    private var partition: InternalPartition
    public var rawValue: String { return partition.rawValue }

    // AWS Standard
    public static let aws = Partition(partition: .aws)
    // AWS China
    public static let awscn = Partition(partition: .awscn)
    // AWS GovCloud (US)
    public static let awsusgov = Partition(partition: .awsusgov)
    // AWS ISO (US)
    public static let awsiso = Partition(partition: .awsiso)
    // AWS ISOB (US)
    public static let awsisob = Partition(partition: .awsisob)
}

extension Partition: Equatable, Hashable { }

extension Partition {
    public var dnsSuffix: String {
        switch self.partition {
        case .aws: return "amazonaws.com"
        case .awscn: return "amazonaws.com.cn"
        case .awsusgov: return "amazonaws.com"
        case .awsiso: return "c2s.ic.gov"
        case .awsisob: return "sc2s.sgov.gov"
        }
    }
}
