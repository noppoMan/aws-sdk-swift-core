//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift-core/scripts/generate-errors.swift. DO NOT EDIT.

public struct AWSClientError: AWSErrorType {
    enum Error: String {
        case accessDenied = "AccessDenied"
        case authFailure = "AuthFailure"
        case blocked = "Blocked"
        case dryRunOperation = "DryRunOperation"
        case idempotentParameterMismatch = "IdempotentParameterMismatch"
        case incompleteSignature = "IncompleteSignature"
        case invalidAction = "InvalidAction"
        case invalidCharacter = "InvalidCharacter"
        case invalidClientTokenId = "InvalidClientTokenId"
        case invalidPaginationToken = "InvalidPaginationToken"
        case invalidParameter = "InvalidParameter"
        case invalidParameterCombination = "InvalidParameterCombination"
        case invalidParameterValue = "InvalidParameterValue"
        case invalidQueryParameter = "InvalidQueryParameter"
        case invalidSignature = "InvalidSignature"
        case malformedQueryString = "MalformedQueryString"
        case missingAction = "MissingAction"
        case missingAuthenticationToken = "MissingAuthenticationToken"
        case missingParameter = "MissingParameter"
        case optInRequired = "OptInRequired"
        case pendingVerification = "PendingVerification"
        case requestExpired = "RequestExpired"
        case signatureDoesNotMatch = "SignatureDoesNotMatch"
        case unauthorizedOperation = "UnauthorizedOperation"
        case unknownParameter = "UnknownParameter"
        case unsupportedInstanceAttribute = "UnsupportedInstanceAttribute"
        case unsupportedOperation = "UnsupportedOperation"
        case unsupportedProtocol = "UnsupportedProtocol"
        case validationError = "ValidationError"
    }
    private var error: Error
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        // remove "Exception" suffix
        if errorCode.hasSuffix("Exception") {
            errorCode = String(errorCode.dropLast(9))
        }
        guard let error = Error(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }
    
    init(error: Error, message: String? = nil) {
        self.error = error
        self.message = message
    }

    // Access has been denied.
    public static let accessDenied = AWSClientError(error: .accessDenied)
    // The provided credentials could not be validated. Ensure that you are using the correct access keys.
    public static let authFailure = AWSClientError(error: .authFailure)
    // Your account is currently blocked. Contact aws-verification@amazon.com if you have questions.
    public static let blocked = AWSClientError(error: .blocked)
    // The user has the required permissions, so the request would have succeeded, but the DryRun parameter was used.
    public static let dryRunOperation = AWSClientError(error: .dryRunOperation)
    // The request uses the same client token as a previous, but non-identical request. Do not reuse a client token with different requests, unless the requests are identical.
    public static let idempotentParameterMismatch = AWSClientError(error: .idempotentParameterMismatch)
    // The request signature does not conform to AWS standards.
    public static let incompleteSignature = AWSClientError(error: .incompleteSignature)
    // The action or operation requested is not valid. Verify that the action is typed correctly.
    public static let invalidAction = AWSClientError(error: .invalidAction)
    // A specified character is invalid.
    public static let invalidCharacter = AWSClientError(error: .invalidCharacter)
    // The X.509 certificate or AWS access key ID provided does not exist in our records.
    public static let invalidClientTokenId = AWSClientError(error: .invalidClientTokenId)
    // The specified pagination token is not valid or is expired.
    public static let invalidPaginationToken = AWSClientError(error: .invalidPaginationToken)
    // A parameter specified in a request is not valid, is unsupported, or cannot be used. The returned message provides an explanation of the error value.
    public static let invalidParameter = AWSClientError(error: .invalidParameter)
    // Indicates an incorrect combination of parameters, or a missing parameter. For example, trying to terminate an instance without specifying the instance ID.
    public static let invalidParameterCombination = AWSClientError(error: .invalidParameterCombination)
    // A value specified in a parameter is not valid, is unsupported, or cannot be used. Ensure that you specify a resource by using its full ID. The returned message provides an explanation of the error value.
    public static let invalidParameterValue = AWSClientError(error: .invalidParameterValue)
    // The AWS query string is malformed or does not adhere to AWS standards.
    public static let invalidQueryParameter = AWSClientError(error: .invalidQueryParameter)
    // The request signature we calculated does not match the signature you provided. Check your AWS secret access key and signing method. For more information, see REST Authentication and SOAP Authentication for details.
    public static let invalidSignature = AWSClientError(error: .invalidSignature)
    // The query string contains a syntax error.
    public static let malformedQueryString = AWSClientError(error: .malformedQueryString)
    // The request is missing an action or a required parameter.
    public static let missingAction = AWSClientError(error: .missingAction)
    // The request must contain either a valid (registered) AWS access key ID or X.509 certificate.
    public static let missingAuthenticationToken = AWSClientError(error: .missingAuthenticationToken)
    // The request is missing a required parameter. Ensure that you have supplied all the required parameters for the request; for example, the resource ID.
    public static let missingParameter = AWSClientError(error: .missingParameter)
    // You are not authorized to use the requested service. Ensure that you have subscribed to the service you are trying to use. If you are new to AWS, your account might take some time to be activated while your credit card details are being verified.
    public static let optInRequired = AWSClientError(error: .optInRequired)
    // Your account is pending verification. Until the verification process is complete, you may not be able to carry out requests with this account. If you have questions, contact AWS Support.
    public static let pendingVerification = AWSClientError(error: .pendingVerification)
    // The request reached the service more than 15 minutes after the date stamp on the request or more than 15 minutes after the request expiration date (such as for pre-signed URLs), or the date stamp on the request is more than 15 minutes in the future. If you're using temporary security credentials, this error can also occur if the credentials have expired. For more information, see Temporary Security Credentials in the IAM User Guide.
    public static let requestExpired = AWSClientError(error: .requestExpired)
    // The request signature we calculated does not match the signature you provided. Check your AWS secret access key and signing method. For more information, see REST Authentication and SOAP Authentication for details.
    public static let signatureDoesNotMatch = AWSClientError(error: .signatureDoesNotMatch)
    // You are not authorized to perform this operation. Check your IAM policies, and ensure that you are using the correct access keys. For more information, see Controlling Access. If the returned message is encoded, you can decode it using the DecodeAuthorizationMessage action. For more information, see DecodeAuthorizationMessage in the AWS Security Token Service API Reference.
    public static let unauthorizedOperation = AWSClientError(error: .unauthorizedOperation)
    // An unknown or unrecognized parameter was supplied. Requests that could cause this error include supplying a misspelled parameter or a parameter that is not supported for the specified API version.
    public static let unknownParameter = AWSClientError(error: .unknownParameter)
    // The specified attribute cannot be modified.
    public static let unsupportedInstanceAttribute = AWSClientError(error: .unsupportedInstanceAttribute)
    // The specified request includes an unsupported operation. For example, you can't stop an instance that's instance store-backed. Or you might be trying to launch an instance type that is not supported by the specified AMI. The returned message provides details of the unsupported operation.
    public static let unsupportedOperation = AWSClientError(error: .unsupportedOperation)
    // SOAP has been deprecated and is no longer supported. For more information, see SOAP Requests.
    public static let unsupportedProtocol = AWSClientError(error: .unsupportedProtocol)
    // The input fails to satisfy the constraints specified by an AWS service.
    public static let validationError = AWSClientError(error: .validationError)
}

extension AWSClientError: Equatable {
    public static func == (lhs: AWSClientError, rhs: AWSClientError) -> Bool {
        lhs.error == rhs.error
    }
}

extension AWSClientError : CustomStringConvertible {
    public var description: String {
        return "\(error.rawValue): \(message ?? "")"
    }
}
