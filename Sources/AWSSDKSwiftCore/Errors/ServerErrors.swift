//===----------------------------------------------------------------------===//
//
// This source file is part of the AWSSDKSwift open source project
//
// Copyright (c) 2017-2020 the AWSSDKSwift project authors
// Licensed under Apache License v2.0
//
// See LICENSE.txt for license information
// See CONTRIBUTORS.txt for the list of AWSSDKSwift project authors
//
// SPDX-License-Identifier: Apache-2.0
//
//===----------------------------------------------------------------------===//

// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/swift-aws/aws-sdk-swift-core/scripts/generate-errors.swift. DO NOT EDIT.

public struct AWSServerError: AWSErrorType {
    enum Error: String {
        case insufficientAddressCapacity = "InsufficientAddressCapacity"
        case insufficientCapacity = "InsufficientCapacity"
        case insufficientHostCapacity = "InsufficientHostCapacity"
        case insufficientInstanceCapacity = "InsufficientInstanceCapacity"
        case insufficientReservedInstanceCapacity = "InsufficientReservedInstanceCapacity"
        case internalError = "InternalError"
        case internalFailure = "InternalFailure"
        case requestLimitExceeded = "RequestLimitExceeded"
        case serviceUnavailable = "ServiceUnavailable"
        case unavailable = "Unavailable"
    }
    private var error: Error
    public var message: String?

    public init?(errorCode: String, message: String?) {
        var errorCode = errorCode
        // remove "Exception" suffix
        if errorCode.hasSuffix("Exception") {
            errorCode = String(errorCode.dropLast(9))
        }
        guard let error = Error(rawValue: errorCode) else { return nil }
        self.error = error
        self.message = message
    }
    
    init(error: Error, message: String? = nil) {
        self.error = error
        self.message = message
    }

    // Not enough available addresses to satisfy your minimum request. Reduce the number of addresses you are requesting or wait for additional capacity to become available.
    public static let insufficientAddressCapacity = AWSServerError(error: .insufficientAddressCapacity)
    // There is not enough capacity to fulfill your import instance request. You can wait for additional capacity to become available.
    public static let insufficientCapacity = AWSServerError(error: .insufficientCapacity)
    // There is not enough capacity to fulfill your Dedicated Host request. Reduce the number of Dedicated Hosts in your request, or wait for additional capacity to become available.
    public static let insufficientHostCapacity = AWSServerError(error: .insufficientHostCapacity)
    // There is not enough capacity to fulfill your instance request. Reduce the number of instances in your request, or wait for additional capacity to become available. You can also try launching an instance by selecting different instance types (which you can resize at a later stage). The returned message might also give specific guidance about how to solve the problem.
    public static let insufficientInstanceCapacity = AWSServerError(error: .insufficientInstanceCapacity)
    // Not enough available Reserved instances to satisfy your minimum request. Reduce the number of Reserved instances in your request or wait for additional capacity to become available.
    public static let insufficientReservedInstanceCapacity = AWSServerError(error: .insufficientReservedInstanceCapacity)
    // An internal error has occurred. Retry your request, but if the problem persists, contact us with details by posting a message on the AWS forums.
    public static let internalError = AWSServerError(error: .internalError)
    // The request processing has failed because of an unknown error, exception or failure.
    public static let internalFailure = AWSServerError(error: .internalFailure)
    // The maximum request rate permitted by the Amazon EC2 APIs has been exceeded for your account. For best results, use an increasing or variable sleep interval between requests. For more information, see Query API Request Rate.
    public static let requestLimitExceeded = AWSServerError(error: .requestLimitExceeded)
    // The request has failed due to a temporary failure of the server.
    public static let serviceUnavailable = AWSServerError(error: .serviceUnavailable)
    // The server is overloaded and can't handle the request.
    public static let unavailable = AWSServerError(error: .unavailable)
}

extension AWSServerError: Equatable {
    public static func == (lhs: AWSServerError, rhs: AWSServerError) -> Bool {
        lhs.error == rhs.error
    }
}

extension AWSServerError : CustomStringConvertible {
    public var description: String {
        return "\(error.rawValue): \(message ?? "")"
    }
}
