// THIS FILE IS AUTOMATICALLY GENERATED by https://github.com/noppoMan/aws-sdk-swift/blob/master/Sources/CodeGenerator/main.swift. DO NOT EDIT.

import Foundation
import AWSSDKSwiftCore

extension Autoscaling {

    public struct LaunchConfigurationsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchConfigurations", required: true, type: .list),
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The launch configurations.
        public let launchConfigurations: [LaunchConfiguration]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(launchConfigurations: [LaunchConfiguration], nextToken: String? = nil) {
            self.launchConfigurations = launchConfigurations
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurations = "LaunchConfigurations"
            case nextToken = "NextToken"
        }
    }

    public struct ActivityType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activity", required: false, type: .structure)
        ]
        /// A scaling activity.
        public let activity: Activity?

        public init(activity: Activity? = nil) {
            self.activity = activity
        }

        private enum CodingKeys: String, CodingKey {
            case activity = "Activity"
        }
    }

    public struct TargetTrackingConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetValue", required: true, type: .double),
            AWSShapeMember(label: "PredefinedMetricSpecification", required: false, type: .structure),
            AWSShapeMember(label: "CustomizedMetricSpecification", required: false, type: .structure),
            AWSShapeMember(label: "DisableScaleIn", required: false, type: .boolean)
        ]
        /// The target value for the metric.
        public let targetValue: Double
        /// A predefined metric. You can specify either a predefined metric or a customized metric.
        public let predefinedMetricSpecification: PredefinedMetricSpecification?
        /// A customized metric.
        public let customizedMetricSpecification: CustomizedMetricSpecification?
        /// Indicates whether scale in by the target tracking policy is disabled. If the value is true, scale in is disabled and the target tracking policy won't remove instances from the Auto Scaling group. Otherwise, scale in is enabled and the target tracking policy can remove instances from the Auto Scaling group. The default value is false.
        public let disableScaleIn: Bool?

        public init(targetValue: Double, predefinedMetricSpecification: PredefinedMetricSpecification? = nil, customizedMetricSpecification: CustomizedMetricSpecification? = nil, disableScaleIn: Bool? = nil) {
            self.targetValue = targetValue
            self.predefinedMetricSpecification = predefinedMetricSpecification
            self.customizedMetricSpecification = customizedMetricSpecification
            self.disableScaleIn = disableScaleIn
        }

        private enum CodingKeys: String, CodingKey {
            case targetValue = "TargetValue"
            case predefinedMetricSpecification = "PredefinedMetricSpecification"
            case customizedMetricSpecification = "CustomizedMetricSpecification"
            case disableScaleIn = "DisableScaleIn"
        }
    }

    public struct ProcessType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessName", required: true, type: .string)
        ]
        /// One of the following processes:    Launch     Terminate     AddToLoadBalancer     AlarmNotification     AZRebalance     HealthCheck     ReplaceUnhealthy     ScheduledActions
        public let processName: String

        public init(processName: String) {
            self.processName = processName
        }

        private enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
        }
    }

    public struct DeleteLifecycleHookAnswer: AWSShape {

    }

    public struct PutLifecycleHookType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationTargetARN", required: false, type: .string),
            AWSShapeMember(label: "NotificationMetadata", required: false, type: .string),
            AWSShapeMember(label: "DefaultResult", required: false, type: .string),
            AWSShapeMember(label: "RoleARN", required: false, type: .string),
            AWSShapeMember(label: "HeartbeatTimeout", required: false, type: .integer),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "LifecycleTransition", required: false, type: .string),
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string)
        ]
        /// The ARN of the notification target that Auto Scaling will use to notify you when an instance is in the transition state for the lifecycle hook. This target can be either an SQS queue or an SNS topic. If you specify an empty string, this overrides the current ARN. This operation uses the JSON format when sending notifications to an Amazon SQS queue, and an email key/value pair format when sending notifications to an Amazon SNS topic. When you specify a notification target, Auto Scaling sends it a test message. Test messages contains the following additional key/value pair: "Event": "autoscaling:TEST_NOTIFICATION".
        public let notificationTargetARN: String?
        /// Contains additional information that you want to include any time Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. This parameter can be either CONTINUE or ABANDON. The default value is ABANDON.
        public let defaultResult: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target. This parameter is required for new lifecycle hooks, but optional when updating existing hooks.
        public let roleARN: String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. The range is from 30 to 7200 seconds. The default is 3600 seconds (1 hour). If the lifecycle hook times out, Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat.
        public let heartbeatTimeout: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The instance state to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see DescribeLifecycleHookTypes. This parameter is required for new lifecycle hooks, but optional when updating existing hooks.
        public let lifecycleTransition: String?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String

        public init(notificationTargetARN: String? = nil, notificationMetadata: String? = nil, defaultResult: String? = nil, roleARN: String? = nil, heartbeatTimeout: Int32? = nil, autoScalingGroupName: String, lifecycleTransition: String? = nil, lifecycleHookName: String) {
            self.notificationTargetARN = notificationTargetARN
            self.notificationMetadata = notificationMetadata
            self.defaultResult = defaultResult
            self.roleARN = roleARN
            self.heartbeatTimeout = heartbeatTimeout
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleTransition = lifecycleTransition
            self.lifecycleHookName = lifecycleHookName
        }

        private enum CodingKeys: String, CodingKey {
            case notificationTargetARN = "NotificationTargetARN"
            case notificationMetadata = "NotificationMetadata"
            case defaultResult = "DefaultResult"
            case roleARN = "RoleARN"
            case heartbeatTimeout = "HeartbeatTimeout"
            case autoScalingGroupName = "AutoScalingGroupName"
            case lifecycleTransition = "LifecycleTransition"
            case lifecycleHookName = "LifecycleHookName"
        }
    }

    public struct LaunchConfigurationNamesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "LaunchConfigurationNames", required: false, type: .list)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The launch configuration names. If you omit this parameter, all launch configurations are described.
        public let launchConfigurationNames: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, launchConfigurationNames: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.launchConfigurationNames = launchConfigurationNames
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case launchConfigurationNames = "LaunchConfigurationNames"
        }
    }

    public struct DescribeNotificationConfigurationsAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "NotificationConfigurations", required: true, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The notification configurations.
        public let notificationConfigurations: [NotificationConfiguration]

        public init(nextToken: String? = nil, notificationConfigurations: [NotificationConfiguration]) {
            self.nextToken = nextToken
            self.notificationConfigurations = notificationConfigurations
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case notificationConfigurations = "NotificationConfigurations"
        }
    }

    public struct ScalingPolicy: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinAdjustmentStep", required: false, type: .integer),
            AWSShapeMember(label: "PolicyType", required: false, type: .string),
            AWSShapeMember(label: "AdjustmentType", required: false, type: .string),
            AWSShapeMember(label: "Cooldown", required: false, type: .integer),
            AWSShapeMember(label: "MinAdjustmentMagnitude", required: false, type: .integer),
            AWSShapeMember(label: "PolicyName", required: false, type: .string),
            AWSShapeMember(label: "TargetTrackingConfiguration", required: false, type: .structure),
            AWSShapeMember(label: "MetricAggregationType", required: false, type: .string),
            AWSShapeMember(label: "ScalingAdjustment", required: false, type: .integer),
            AWSShapeMember(label: "PolicyARN", required: false, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string),
            AWSShapeMember(label: "Alarms", required: false, type: .list),
            AWSShapeMember(label: "EstimatedInstanceWarmup", required: false, type: .integer),
            AWSShapeMember(label: "StepAdjustments", required: false, type: .list)
        ]
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        public let minAdjustmentStep: Int32?
        /// The policy type. Valid values are SimpleScaling and StepScaling.
        public let policyType: String?
        /// The adjustment type, which specifies how ScalingAdjustment is interpreted. Valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public let adjustmentType: String?
        /// The amount of time, in seconds, after a scaling activity completes before any further dynamic scaling activities can start.
        public let cooldown: Int32?
        /// The minimum number of instances to scale. If the value of AdjustmentType is PercentChangeInCapacity, the scaling policy changes the DesiredCapacity of the Auto Scaling group by at least this many instances. Otherwise, the error is ValidationError.
        public let minAdjustmentMagnitude: Int32?
        /// The name of the scaling policy.
        public let policyName: String?
        /// A target tracking policy.
        public let targetTrackingConfiguration: TargetTrackingConfiguration?
        /// The aggregation type for the CloudWatch metrics. Valid values are Minimum, Maximum, and Average.
        public let metricAggregationType: String?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public let scalingAdjustment: Int32?
        /// The Amazon Resource Name (ARN) of the policy.
        public let policyARN: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The CloudWatch alarms related to the policy.
        public let alarms: [Alarm]?
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics.
        public let estimatedInstanceWarmup: Int32?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach.
        public let stepAdjustments: [StepAdjustment]?

        public init(minAdjustmentStep: Int32? = nil, policyType: String? = nil, adjustmentType: String? = nil, cooldown: Int32? = nil, minAdjustmentMagnitude: Int32? = nil, policyName: String? = nil, targetTrackingConfiguration: TargetTrackingConfiguration? = nil, metricAggregationType: String? = nil, scalingAdjustment: Int32? = nil, policyARN: String? = nil, autoScalingGroupName: String? = nil, alarms: [Alarm]? = nil, estimatedInstanceWarmup: Int32? = nil, stepAdjustments: [StepAdjustment]? = nil) {
            self.minAdjustmentStep = minAdjustmentStep
            self.policyType = policyType
            self.adjustmentType = adjustmentType
            self.cooldown = cooldown
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.policyName = policyName
            self.targetTrackingConfiguration = targetTrackingConfiguration
            self.metricAggregationType = metricAggregationType
            self.scalingAdjustment = scalingAdjustment
            self.policyARN = policyARN
            self.autoScalingGroupName = autoScalingGroupName
            self.alarms = alarms
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.stepAdjustments = stepAdjustments
        }

        private enum CodingKeys: String, CodingKey {
            case minAdjustmentStep = "MinAdjustmentStep"
            case policyType = "PolicyType"
            case adjustmentType = "AdjustmentType"
            case cooldown = "Cooldown"
            case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
            case policyName = "PolicyName"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
            case metricAggregationType = "MetricAggregationType"
            case scalingAdjustment = "ScalingAdjustment"
            case policyARN = "PolicyARN"
            case autoScalingGroupName = "AutoScalingGroupName"
            case alarms = "Alarms"
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
            case stepAdjustments = "StepAdjustments"
        }
    }

    public struct DetachLoadBalancersType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerNames", required: true, type: .list),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// One or more load balancer names.
        public let loadBalancerNames: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(loadBalancerNames: [String], autoScalingGroupName: String) {
            self.loadBalancerNames = loadBalancerNames
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerNames = "LoadBalancerNames"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct AdjustmentType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdjustmentType", required: false, type: .string)
        ]
        /// The policy adjustment type. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity.
        public let adjustmentType: String?

        public init(adjustmentType: String? = nil) {
            self.adjustmentType = adjustmentType
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentType = "AdjustmentType"
        }
    }

    public struct AutoScalingInstanceDetails: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string),
            AWSShapeMember(label: "LifecycleState", required: true, type: .string),
            AWSShapeMember(label: "InstanceId", required: true, type: .string),
            AWSShapeMember(label: "ProtectedFromScaleIn", required: true, type: .boolean),
            AWSShapeMember(label: "HealthStatus", required: true, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure),
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string)
        ]
        /// The launch configuration used to launch the instance. This value is not available if you attached the instance to the Auto Scaling group.
        public let launchConfigurationName: String?
        /// The lifecycle state for the instance. For more information, see Auto Scaling Lifecycle in the Auto Scaling User Guide.
        public let lifecycleState: String
        /// The ID of the instance.
        public let instanceId: String
        /// Indicates whether the instance is protected from termination by Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// The last reported health status of this instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and Auto Scaling should terminate and replace it.
        public let healthStatus: String
        /// The name of the Auto Scaling group for the instance.
        public let autoScalingGroupName: String
        /// The launch template for the instance.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The Availability Zone for the instance.
        public let availabilityZone: String

        public init(launchConfigurationName: String? = nil, lifecycleState: String, instanceId: String, protectedFromScaleIn: Bool, healthStatus: String, autoScalingGroupName: String, launchTemplate: LaunchTemplateSpecification? = nil, availabilityZone: String) {
            self.launchConfigurationName = launchConfigurationName
            self.lifecycleState = lifecycleState
            self.instanceId = instanceId
            self.protectedFromScaleIn = protectedFromScaleIn
            self.healthStatus = healthStatus
            self.autoScalingGroupName = autoScalingGroupName
            self.launchTemplate = launchTemplate
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurationName = "LaunchConfigurationName"
            case lifecycleState = "LifecycleState"
            case instanceId = "InstanceId"
            case protectedFromScaleIn = "ProtectedFromScaleIn"
            case healthStatus = "HealthStatus"
            case autoScalingGroupName = "AutoScalingGroupName"
            case launchTemplate = "LaunchTemplate"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct PutScheduledUpdateGroupActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp),
            AWSShapeMember(label: "MinSize", required: false, type: .integer),
            AWSShapeMember(label: "Time", required: false, type: .timestamp),
            AWSShapeMember(label: "MaxSize", required: false, type: .integer),
            AWSShapeMember(label: "DesiredCapacity", required: false, type: .integer),
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp),
            AWSShapeMember(label: "ScheduledActionName", required: true, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "Recurrence", required: false, type: .string)
        ]
        /// The time for this action to start, in "YYYY-MM-DDThh:mm:ssZ" format in UTC/GMT only (for example, 2014-06-01T00:00:00Z). If you specify Recurrence and StartTime, Auto Scaling performs the action at this time, and then performs the action based on the specified recurrence. If you try to schedule your action in the past, Auto Scaling returns an error message.
        public let startTime: TimeStamp?
        /// The minimum size for the Auto Scaling group.
        public let minSize: Int32?
        /// This parameter is deprecated.
        public let time: TimeStamp?
        /// The maximum size for the Auto Scaling group.
        public let maxSize: Int32?
        /// The number of EC2 instances that should be running in the group.
        public let desiredCapacity: Int32?
        /// The time for the recurring schedule to end. Auto Scaling does not perform the action after this time.
        public let endTime: TimeStamp?
        /// The name of this scaling action.
        public let scheduledActionName: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The recurring schedule for this action, in Unix cron syntax format. For more information, see Cron in Wikipedia.
        public let recurrence: String?

        public init(startTime: TimeStamp? = nil, minSize: Int32? = nil, time: TimeStamp? = nil, maxSize: Int32? = nil, desiredCapacity: Int32? = nil, endTime: TimeStamp? = nil, scheduledActionName: String, autoScalingGroupName: String, recurrence: String? = nil) {
            self.startTime = startTime
            self.minSize = minSize
            self.time = time
            self.maxSize = maxSize
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.scheduledActionName = scheduledActionName
            self.autoScalingGroupName = autoScalingGroupName
            self.recurrence = recurrence
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case minSize = "MinSize"
            case time = "Time"
            case maxSize = "MaxSize"
            case desiredCapacity = "DesiredCapacity"
            case endTime = "EndTime"
            case scheduledActionName = "ScheduledActionName"
            case autoScalingGroupName = "AutoScalingGroupName"
            case recurrence = "Recurrence"
        }
    }

    public struct AutoScalingGroupNamesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "AutoScalingGroupNames", required: false, type: .list)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The names of the Auto Scaling groups. If you omit this parameter, all Auto Scaling groups are described.
        public let autoScalingGroupNames: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, autoScalingGroupNames: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.autoScalingGroupNames = autoScalingGroupNames
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case autoScalingGroupNames = "AutoScalingGroupNames"
        }
    }

    public struct DescribeScheduledActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp),
            AWSShapeMember(label: "ScheduledActionNames", required: false, type: .list),
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string),
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp),
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The earliest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
        public let startTime: TimeStamp?
        /// Describes one or more scheduled actions. If you omit this parameter, all scheduled actions are described. If you specify an unknown scheduled action, it is ignored with no error. You can describe up to a maximum of 50 instances with a single call. If there are more items to return, the call returns a token. To get the next set of items, repeat the call with the returned token.
        public let scheduledActionNames: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The latest scheduled start time to return. If scheduled action names are provided, this parameter is ignored.
        public let endTime: TimeStamp?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxRecords: Int32? = nil, startTime: TimeStamp? = nil, scheduledActionNames: [String]? = nil, autoScalingGroupName: String? = nil, endTime: TimeStamp? = nil, nextToken: String? = nil) {
            self.maxRecords = maxRecords
            self.startTime = startTime
            self.scheduledActionNames = scheduledActionNames
            self.autoScalingGroupName = autoScalingGroupName
            self.endTime = endTime
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case startTime = "StartTime"
            case scheduledActionNames = "ScheduledActionNames"
            case autoScalingGroupName = "AutoScalingGroupName"
            case endTime = "EndTime"
            case nextToken = "NextToken"
        }
    }

    public struct LoadBalancerState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerName", required: false, type: .string),
            AWSShapeMember(label: "State", required: false, type: .string)
        ]
        /// The name of the load balancer.
        public let loadBalancerName: String?
        /// One of the following load balancer states:    Adding - The instances in the group are being registered with the load balancer.    Added - All instances in the group are registered with the load balancer.    InService - At least one instance in the group passed an ELB health check.    Removing - The instances in the group are being deregistered from the load balancer. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.    Removed - All instances in the group are deregistered from the load balancer.
        public let state: String?

        public init(loadBalancerName: String? = nil, state: String? = nil) {
            self.loadBalancerName = loadBalancerName
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerName = "LoadBalancerName"
            case state = "State"
        }
    }

    public struct ExecutePolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PolicyName", required: true, type: .string),
            AWSShapeMember(label: "BreachThreshold", required: false, type: .double),
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string),
            AWSShapeMember(label: "HonorCooldown", required: false, type: .boolean),
            AWSShapeMember(label: "MetricValue", required: false, type: .double)
        ]
        /// The name or ARN of the policy.
        public let policyName: String
        /// The breach threshold for the alarm. This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let breachThreshold: Double?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// If this parameter is true, Auto Scaling waits for the cooldown period to complete before executing the policy. Otherwise, Auto Scaling executes the policy without waiting for the cooldown period to complete. This parameter is not supported if the policy type is StepScaling. For more information, see Auto Scaling Cooldowns in the Auto Scaling User Guide.
        public let honorCooldown: Bool?
        /// The metric value to compare to BreachThreshold. This enables you to execute a policy of type StepScaling and determine which step adjustment to use. For example, if the breach threshold is 50 and you want to use a step adjustment with a lower bound of 0 and an upper bound of 10, you can set the metric value to 59. If you specify a metric value that doesn't correspond to a step adjustment for the policy, the call returns an error. This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let metricValue: Double?

        public init(policyName: String, breachThreshold: Double? = nil, autoScalingGroupName: String? = nil, honorCooldown: Bool? = nil, metricValue: Double? = nil) {
            self.policyName = policyName
            self.breachThreshold = breachThreshold
            self.autoScalingGroupName = autoScalingGroupName
            self.honorCooldown = honorCooldown
            self.metricValue = metricValue
        }

        private enum CodingKeys: String, CodingKey {
            case policyName = "PolicyName"
            case breachThreshold = "BreachThreshold"
            case autoScalingGroupName = "AutoScalingGroupName"
            case honorCooldown = "HonorCooldown"
            case metricValue = "MetricValue"
        }
    }

    public struct DisableMetricsCollectionQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metrics", required: false, type: .list),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// One or more of the following metrics. If you omit this parameter, all metrics are disabled.    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances
        public let metrics: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(metrics: [String]? = nil, autoScalingGroupName: String) {
            self.metrics = metrics
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case metrics = "Metrics"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct DescribeAutoScalingNotificationTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingNotificationTypes", required: false, type: .list)
        ]
        /// The notification types.
        public let autoScalingNotificationTypes: [String]?

        public init(autoScalingNotificationTypes: [String]? = nil) {
            self.autoScalingNotificationTypes = autoScalingNotificationTypes
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingNotificationTypes = "AutoScalingNotificationTypes"
        }
    }

    public struct Tag: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: true, type: .string),
            AWSShapeMember(label: "PropagateAtLaunch", required: false, type: .boolean),
            AWSShapeMember(label: "Value", required: false, type: .string),
            AWSShapeMember(label: "ResourceType", required: false, type: .string),
            AWSShapeMember(label: "ResourceId", required: false, type: .string)
        ]
        /// The tag key.
        public let key: String
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public let propagateAtLaunch: Bool?
        /// The tag value.
        public let value: String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public let resourceType: String?
        /// The name of the group.
        public let resourceId: String?

        public init(key: String, propagateAtLaunch: Bool? = nil, value: String? = nil, resourceType: String? = nil, resourceId: String? = nil) {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.value = value
            self.resourceType = resourceType
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case propagateAtLaunch = "PropagateAtLaunch"
            case value = "Value"
            case resourceType = "ResourceType"
            case resourceId = "ResourceId"
        }
    }

    public struct AttachLoadBalancersType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerNames", required: true, type: .list),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// One or more load balancer names.
        public let loadBalancerNames: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(loadBalancerNames: [String], autoScalingGroupName: String) {
            self.loadBalancerNames = loadBalancerNames
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerNames = "LoadBalancerNames"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct LoadBalancerTargetGroupState: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerTargetGroupARN", required: false, type: .string),
            AWSShapeMember(label: "State", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the target group.
        public let loadBalancerTargetGroupARN: String?
        /// The state of the target group.    Adding - The Auto Scaling instances are being registered with the target group.    Added - All Auto Scaling instances are registered with the target group.    InService - At least one Auto Scaling instance passed an ELB health check.    Removing - The Auto Scaling instances are being deregistered from the target group. If connection draining is enabled, Elastic Load Balancing waits for in-flight requests to complete before deregistering the instances.    Removed - All Auto Scaling instances are deregistered from the target group.
        public let state: String?

        public init(loadBalancerTargetGroupARN: String? = nil, state: String? = nil) {
            self.loadBalancerTargetGroupARN = loadBalancerTargetGroupARN
            self.state = state
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerTargetGroupARN = "LoadBalancerTargetGroupARN"
            case state = "State"
        }
    }

    public struct TagDescription: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Key", required: false, type: .string),
            AWSShapeMember(label: "PropagateAtLaunch", required: false, type: .boolean),
            AWSShapeMember(label: "Value", required: false, type: .string),
            AWSShapeMember(label: "ResourceType", required: false, type: .string),
            AWSShapeMember(label: "ResourceId", required: false, type: .string)
        ]
        /// The tag key.
        public let key: String?
        /// Determines whether the tag is added to new instances as they are launched in the group.
        public let propagateAtLaunch: Bool?
        /// The tag value.
        public let value: String?
        /// The type of resource. The only supported value is auto-scaling-group.
        public let resourceType: String?
        /// The name of the group.
        public let resourceId: String?

        public init(key: String? = nil, propagateAtLaunch: Bool? = nil, value: String? = nil, resourceType: String? = nil, resourceId: String? = nil) {
            self.key = key
            self.propagateAtLaunch = propagateAtLaunch
            self.value = value
            self.resourceType = resourceType
            self.resourceId = resourceId
        }

        private enum CodingKeys: String, CodingKey {
            case key = "Key"
            case propagateAtLaunch = "PropagateAtLaunch"
            case value = "Value"
            case resourceType = "ResourceType"
            case resourceId = "ResourceId"
        }
    }

    public struct CompleteLifecycleActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string),
            AWSShapeMember(label: "LifecycleActionToken", required: false, type: .string),
            AWSShapeMember(label: "LifecycleActionResult", required: true, type: .string),
            AWSShapeMember(label: "InstanceId", required: false, type: .string)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// A universally unique identifier (UUID) that identifies a specific lifecycle action associated with an instance. Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
        public let lifecycleActionToken: String?
        /// The action for the group to take. This parameter can be either CONTINUE or ABANDON.
        public let lifecycleActionResult: String
        /// The ID of the instance.
        public let instanceId: String?

        public init(autoScalingGroupName: String, lifecycleHookName: String, lifecycleActionToken: String? = nil, lifecycleActionResult: String, instanceId: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleActionToken = lifecycleActionToken
            self.lifecycleActionResult = lifecycleActionResult
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case lifecycleHookName = "LifecycleHookName"
            case lifecycleActionToken = "LifecycleActionToken"
            case lifecycleActionResult = "LifecycleActionResult"
            case instanceId = "InstanceId"
        }
    }

    public struct StepAdjustment: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScalingAdjustment", required: true, type: .integer),
            AWSShapeMember(label: "MetricIntervalUpperBound", required: false, type: .double),
            AWSShapeMember(label: "MetricIntervalLowerBound", required: false, type: .double)
        ]
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity.
        public let scalingAdjustment: Int32
        /// The upper bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the upper bound is exclusive (the metric must be less than the threshold plus the upper bound). Otherwise, it is inclusive (the metric must be less than or equal to the threshold plus the upper bound). A null value indicates positive infinity. The upper bound must be greater than the lower bound.
        public let metricIntervalUpperBound: Double?
        /// The lower bound for the difference between the alarm threshold and the CloudWatch metric. If the metric value is above the breach threshold, the lower bound is inclusive (the metric must be greater than or equal to the threshold plus the lower bound). Otherwise, it is exclusive (the metric must be greater than the threshold plus the lower bound). A null value indicates negative infinity.
        public let metricIntervalLowerBound: Double?

        public init(scalingAdjustment: Int32, metricIntervalUpperBound: Double? = nil, metricIntervalLowerBound: Double? = nil) {
            self.scalingAdjustment = scalingAdjustment
            self.metricIntervalUpperBound = metricIntervalUpperBound
            self.metricIntervalLowerBound = metricIntervalLowerBound
        }

        private enum CodingKeys: String, CodingKey {
            case scalingAdjustment = "ScalingAdjustment"
            case metricIntervalUpperBound = "MetricIntervalUpperBound"
            case metricIntervalLowerBound = "MetricIntervalLowerBound"
        }
    }

    public struct SetInstanceProtectionAnswer: AWSShape {

    }

    public struct Alarm: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AlarmName", required: false, type: .string),
            AWSShapeMember(label: "AlarmARN", required: false, type: .string)
        ]
        /// The name of the alarm.
        public let alarmName: String?
        /// The Amazon Resource Name (ARN) of the alarm.
        public let alarmARN: String?

        public init(alarmName: String? = nil, alarmARN: String? = nil) {
            self.alarmName = alarmName
            self.alarmARN = alarmARN
        }

        private enum CodingKeys: String, CodingKey {
            case alarmName = "AlarmName"
            case alarmARN = "AlarmARN"
        }
    }

    public struct Instance: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string),
            AWSShapeMember(label: "LifecycleState", required: true, type: .enum),
            AWSShapeMember(label: "InstanceId", required: true, type: .string),
            AWSShapeMember(label: "ProtectedFromScaleIn", required: true, type: .boolean),
            AWSShapeMember(label: "HealthStatus", required: true, type: .string),
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure),
            AWSShapeMember(label: "AvailabilityZone", required: true, type: .string)
        ]
        /// The launch configuration associated with the instance.
        public let launchConfigurationName: String?
        /// A description of the current lifecycle state. Note that the Quarantined state is not used.
        public let lifecycleState: LifecycleState
        /// The ID of the instance.
        public let instanceId: String
        /// Indicates whether the instance is protected from termination by Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// The last reported health status of the instance. "Healthy" means that the instance is healthy and should remain in service. "Unhealthy" means that the instance is unhealthy and Auto Scaling should terminate and replace it.
        public let healthStatus: String
        /// The launch template for the instance.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The Availability Zone in which the instance is running.
        public let availabilityZone: String

        public init(launchConfigurationName: String? = nil, lifecycleState: LifecycleState, instanceId: String, protectedFromScaleIn: Bool, healthStatus: String, launchTemplate: LaunchTemplateSpecification? = nil, availabilityZone: String) {
            self.launchConfigurationName = launchConfigurationName
            self.lifecycleState = lifecycleState
            self.instanceId = instanceId
            self.protectedFromScaleIn = protectedFromScaleIn
            self.healthStatus = healthStatus
            self.launchTemplate = launchTemplate
            self.availabilityZone = availabilityZone
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurationName = "LaunchConfigurationName"
            case lifecycleState = "LifecycleState"
            case instanceId = "InstanceId"
            case protectedFromScaleIn = "ProtectedFromScaleIn"
            case healthStatus = "HealthStatus"
            case launchTemplate = "LaunchTemplate"
            case availabilityZone = "AvailabilityZone"
        }
    }

    public struct ScalingProcessQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "ScalingProcesses", required: false, type: .list)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more of the following processes. If you omit this parameter, all processes are specified.    Launch     Terminate     HealthCheck     ReplaceUnhealthy     AZRebalance     AlarmNotification     ScheduledActions     AddToLoadBalancer
        public let scalingProcesses: [String]?

        public init(autoScalingGroupName: String, scalingProcesses: [String]? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.scalingProcesses = scalingProcesses
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case scalingProcesses = "ScalingProcesses"
        }
    }

    public struct ExitStandbyQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", required: false, type: .list),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// One or more instance IDs. You must specify at least one instance ID.
        public let instanceIds: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(instanceIds: [String]? = nil, autoScalingGroupName: String) {
            self.instanceIds = instanceIds
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct CreateAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list),
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string),
            AWSShapeMember(label: "NewInstancesProtectedFromScaleIn", required: false, type: .boolean),
            AWSShapeMember(label: "LifecycleHookSpecificationList", required: false, type: .list),
            AWSShapeMember(label: "VPCZoneIdentifier", required: false, type: .string),
            AWSShapeMember(label: "Tags", required: false, type: .list),
            AWSShapeMember(label: "MaxSize", required: true, type: .integer),
            AWSShapeMember(label: "TargetGroupARNs", required: false, type: .list),
            AWSShapeMember(label: "MinSize", required: true, type: .integer),
            AWSShapeMember(label: "DesiredCapacity", required: false, type: .integer),
            AWSShapeMember(label: "PlacementGroup", required: false, type: .string),
            AWSShapeMember(label: "InstanceId", required: false, type: .string),
            AWSShapeMember(label: "DefaultCooldown", required: false, type: .integer),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "HealthCheckGracePeriod", required: false, type: .integer),
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure),
            AWSShapeMember(label: "LoadBalancerNames", required: false, type: .list),
            AWSShapeMember(label: "HealthCheckType", required: false, type: .string),
            AWSShapeMember(label: "TerminationPolicies", required: false, type: .list)
        ]
        /// One or more Availability Zones for the group. This parameter is optional if you specify one or more subnets.
        public let availabilityZones: [String]?
        /// The name of the launch configuration. You must specify one of the following: a launch configuration, a launch template, or an EC2 instance.
        public let launchConfigurationName: String?
        /// Indicates whether newly launched instances are protected from termination by Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// One or more lifecycle hooks.
        public let lifecycleHookSpecificationList: [LifecycleHookSpecification]?
        /// A comma-separated list of subnet identifiers for your virtual private cloud (VPC). If you specify subnets and Availability Zones with this call, ensure that the subnets' Availability Zones match the Availability Zones specified. For more information, see Launching Auto Scaling Instances in a VPC in the Auto Scaling User Guide.
        public let vPCZoneIdentifier: String?
        /// One or more tags. For more information, see Tagging Auto Scaling Groups and Instances in the Auto Scaling User Guide.
        public let tags: [Tag]?
        /// The maximum size of the group.
        public let maxSize: Int32
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupARNs: [String]?
        /// The minimum size of the group.
        public let minSize: Int32
        /// The number of EC2 instances that should be running in the group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group. If you do not specify a desired capacity, the default is the minimum size of the group.
        public let desiredCapacity: Int32?
        /// The name of the placement group into which you'll launch your instances, if any. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
        public let placementGroup: String?
        /// The ID of the instance used to create a launch configuration for the group. You must specify one of the following: an EC2 instance, a launch configuration, or a launch template. When you specify an ID of an instance, Auto Scaling creates a new launch configuration and associates it with the group. This launch configuration derives its attributes from the specified instance, with the exception of the block device mapping. For more information, see Create an Auto Scaling Group Using an EC2 Instance in the Auto Scaling User Guide.
        public let instanceId: String?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default is 300. For more information, see Auto Scaling Cooldowns in the Auto Scaling User Guide.
        public let defaultCooldown: Int32?
        /// The name of the Auto Scaling group. This name must be unique within the scope of your AWS account.
        public let autoScalingGroupName: String
        /// The amount of time, in seconds, that Auto Scaling waits before checking the health status of an EC2 instance that has come into service. During this time, any health check failures for the instance are ignored. The default is 0. This parameter is required if you are adding an ELB health check. For more information, see Health Checks in the Auto Scaling User Guide.
        public let healthCheckGracePeriod: Int32?
        /// The launch template to use to launch instances. You must specify one of the following: a launch template, a launch configuration, or an EC2 instance.
        public let launchTemplate: LaunchTemplateSpecification?
        /// One or more Classic Load Balancers. To specify an Application Load Balancer, use TargetGroupARNs instead. For more information, see Using a Load Balancer With an Auto Scaling Group in the Auto Scaling User Guide.
        public let loadBalancerNames: [String]?
        /// The service to use for the health checks. The valid values are EC2 and ELB. By default, health checks use Amazon EC2 instance status checks to determine the health of an instance. For more information, see Health Checks in the Auto Scaling User Guide.
        public let healthCheckType: String?
        /// One or more termination policies used to select the instance to terminate. These policies are executed in the order that they are listed. For more information, see Controlling Which Instances Auto Scaling Terminates During Scale In in the Auto Scaling User Guide.
        public let terminationPolicies: [String]?

        public init(availabilityZones: [String]? = nil, launchConfigurationName: String? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, lifecycleHookSpecificationList: [LifecycleHookSpecification]? = nil, vPCZoneIdentifier: String? = nil, tags: [Tag]? = nil, maxSize: Int32, targetGroupARNs: [String]? = nil, minSize: Int32, desiredCapacity: Int32? = nil, placementGroup: String? = nil, instanceId: String? = nil, defaultCooldown: Int32? = nil, autoScalingGroupName: String, healthCheckGracePeriod: Int32? = nil, launchTemplate: LaunchTemplateSpecification? = nil, loadBalancerNames: [String]? = nil, healthCheckType: String? = nil, terminationPolicies: [String]? = nil) {
            self.availabilityZones = availabilityZones
            self.launchConfigurationName = launchConfigurationName
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.lifecycleHookSpecificationList = lifecycleHookSpecificationList
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.tags = tags
            self.maxSize = maxSize
            self.targetGroupARNs = targetGroupARNs
            self.minSize = minSize
            self.desiredCapacity = desiredCapacity
            self.placementGroup = placementGroup
            self.instanceId = instanceId
            self.defaultCooldown = defaultCooldown
            self.autoScalingGroupName = autoScalingGroupName
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.launchTemplate = launchTemplate
            self.loadBalancerNames = loadBalancerNames
            self.healthCheckType = healthCheckType
            self.terminationPolicies = terminationPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case launchConfigurationName = "LaunchConfigurationName"
            case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
            case lifecycleHookSpecificationList = "LifecycleHookSpecificationList"
            case vPCZoneIdentifier = "VPCZoneIdentifier"
            case tags = "Tags"
            case maxSize = "MaxSize"
            case targetGroupARNs = "TargetGroupARNs"
            case minSize = "MinSize"
            case desiredCapacity = "DesiredCapacity"
            case placementGroup = "PlacementGroup"
            case instanceId = "InstanceId"
            case defaultCooldown = "DefaultCooldown"
            case autoScalingGroupName = "AutoScalingGroupName"
            case healthCheckGracePeriod = "HealthCheckGracePeriod"
            case launchTemplate = "LaunchTemplate"
            case loadBalancerNames = "LoadBalancerNames"
            case healthCheckType = "HealthCheckType"
            case terminationPolicies = "TerminationPolicies"
        }
    }

    public struct TagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "Tags", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// One or more tags.
        public let tags: [TagDescription]?

        public init(nextToken: String? = nil, tags: [TagDescription]? = nil) {
            self.nextToken = nextToken
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case tags = "Tags"
        }
    }

    public struct PutNotificationConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationTypes", required: true, type: .list),
            AWSShapeMember(label: "TopicARN", required: true, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The type of event that will cause the notification to be sent. For details about notification types supported by Auto Scaling, see DescribeAutoScalingNotificationTypes.
        public let notificationTypes: [String]
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic.
        public let topicARN: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(notificationTypes: [String], topicARN: String, autoScalingGroupName: String) {
            self.notificationTypes = notificationTypes
            self.topicARN = topicARN
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case notificationTypes = "NotificationTypes"
            case topicARN = "TopicARN"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct MetricDimension: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Value", required: true, type: .string),
            AWSShapeMember(label: "Name", required: true, type: .string)
        ]
        /// The value of the dimension.
        public let value: String
        /// The name of the dimension.
        public let name: String

        public init(value: String, name: String) {
            self.value = value
            self.name = name
        }

        private enum CodingKeys: String, CodingKey {
            case value = "Value"
            case name = "Name"
        }
    }

    public struct EnabledMetric: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Granularity", required: false, type: .string),
            AWSShapeMember(label: "Metric", required: false, type: .string)
        ]
        /// The granularity of the metric. The only valid value is 1Minute.
        public let granularity: String?
        /// One of the following metrics:    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances
        public let metric: String?

        public init(granularity: String? = nil, metric: String? = nil) {
            self.granularity = granularity
            self.metric = metric
        }

        private enum CodingKeys: String, CodingKey {
            case granularity = "Granularity"
            case metric = "Metric"
        }
    }

    public struct MetricGranularityType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Granularity", required: false, type: .string)
        ]
        /// The granularity. The only valid value is 1Minute.
        public let granularity: String?

        public init(granularity: String? = nil) {
            self.granularity = granularity
        }

        private enum CodingKeys: String, CodingKey {
            case granularity = "Granularity"
        }
    }

    public struct ScheduledUpdateGroupAction: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: false, type: .timestamp),
            AWSShapeMember(label: "ScheduledActionARN", required: false, type: .string),
            AWSShapeMember(label: "Time", required: false, type: .timestamp),
            AWSShapeMember(label: "MinSize", required: false, type: .integer),
            AWSShapeMember(label: "MaxSize", required: false, type: .integer),
            AWSShapeMember(label: "DesiredCapacity", required: false, type: .integer),
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp),
            AWSShapeMember(label: "ScheduledActionName", required: false, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string),
            AWSShapeMember(label: "Recurrence", required: false, type: .string)
        ]
        /// The date and time that the action is scheduled to begin. This date and time can be up to one month in the future. When StartTime and EndTime are specified with Recurrence, they form the boundaries of when the recurring action will start and stop.
        public let startTime: TimeStamp?
        /// The Amazon Resource Name (ARN) of the scheduled action.
        public let scheduledActionARN: String?
        /// This parameter is deprecated.
        public let time: TimeStamp?
        /// The minimum size of the group.
        public let minSize: Int32?
        /// The maximum size of the group.
        public let maxSize: Int32?
        /// The number of instances you prefer to maintain in the group.
        public let desiredCapacity: Int32?
        /// The date and time that the action is scheduled to end. This date and time can be up to one month in the future.
        public let endTime: TimeStamp?
        /// The name of the scheduled action.
        public let scheduledActionName: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The recurring schedule for the action.
        public let recurrence: String?

        public init(startTime: TimeStamp? = nil, scheduledActionARN: String? = nil, time: TimeStamp? = nil, minSize: Int32? = nil, maxSize: Int32? = nil, desiredCapacity: Int32? = nil, endTime: TimeStamp? = nil, scheduledActionName: String? = nil, autoScalingGroupName: String? = nil, recurrence: String? = nil) {
            self.startTime = startTime
            self.scheduledActionARN = scheduledActionARN
            self.time = time
            self.minSize = minSize
            self.maxSize = maxSize
            self.desiredCapacity = desiredCapacity
            self.endTime = endTime
            self.scheduledActionName = scheduledActionName
            self.autoScalingGroupName = autoScalingGroupName
            self.recurrence = recurrence
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case scheduledActionARN = "ScheduledActionARN"
            case time = "Time"
            case minSize = "MinSize"
            case maxSize = "MaxSize"
            case desiredCapacity = "DesiredCapacity"
            case endTime = "EndTime"
            case scheduledActionName = "ScheduledActionName"
            case autoScalingGroupName = "AutoScalingGroupName"
            case recurrence = "Recurrence"
        }
    }

    public struct DeletePolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string),
            AWSShapeMember(label: "PolicyName", required: true, type: .string)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The name or Amazon Resource Name (ARN) of the policy.
        public let policyName: String

        public init(autoScalingGroupName: String? = nil, policyName: String) {
            self.autoScalingGroupName = autoScalingGroupName
            self.policyName = policyName
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case policyName = "PolicyName"
        }
    }

    public struct ProcessesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Processes", required: false, type: .list)
        ]
        /// The names of the process types.
        public let processes: [ProcessType]?

        public init(processes: [ProcessType]? = nil) {
            self.processes = processes
        }

        private enum CodingKeys: String, CodingKey {
            case processes = "Processes"
        }
    }

    public struct AttachInstancesQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceIds", required: false, type: .list),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// One or more instance IDs.
        public let instanceIds: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(instanceIds: [String]? = nil, autoScalingGroupName: String) {
            self.instanceIds = instanceIds
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case instanceIds = "InstanceIds"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct AutoScalingGroupsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "AutoScalingGroups", required: true, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The groups.
        public let autoScalingGroups: [AutoScalingGroup]

        public init(nextToken: String? = nil, autoScalingGroups: [AutoScalingGroup]) {
            self.nextToken = nextToken
            self.autoScalingGroups = autoScalingGroups
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case autoScalingGroups = "AutoScalingGroups"
        }
    }

    public struct AutoScalingGroup: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: true, type: .list),
            AWSShapeMember(label: "EnabledMetrics", required: false, type: .list),
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string),
            AWSShapeMember(label: "NewInstancesProtectedFromScaleIn", required: false, type: .boolean),
            AWSShapeMember(label: "VPCZoneIdentifier", required: false, type: .string),
            AWSShapeMember(label: "Tags", required: false, type: .list),
            AWSShapeMember(label: "MaxSize", required: true, type: .integer),
            AWSShapeMember(label: "SuspendedProcesses", required: false, type: .list),
            AWSShapeMember(label: "TargetGroupARNs", required: false, type: .list),
            AWSShapeMember(label: "CreatedTime", required: true, type: .timestamp),
            AWSShapeMember(label: "Status", required: false, type: .string),
            AWSShapeMember(label: "MinSize", required: true, type: .integer),
            AWSShapeMember(label: "DesiredCapacity", required: true, type: .integer),
            AWSShapeMember(label: "AutoScalingGroupARN", required: false, type: .string),
            AWSShapeMember(label: "PlacementGroup", required: false, type: .string),
            AWSShapeMember(label: "DefaultCooldown", required: true, type: .integer),
            AWSShapeMember(label: "Instances", required: false, type: .list),
            AWSShapeMember(label: "TerminationPolicies", required: false, type: .list),
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure),
            AWSShapeMember(label: "HealthCheckGracePeriod", required: false, type: .integer),
            AWSShapeMember(label: "LoadBalancerNames", required: false, type: .list),
            AWSShapeMember(label: "HealthCheckType", required: true, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// One or more Availability Zones for the group.
        public let availabilityZones: [String]
        /// The metrics enabled for the group.
        public let enabledMetrics: [EnabledMetric]?
        /// The name of the associated launch configuration.
        public let launchConfigurationName: String?
        /// Indicates whether newly launched instances are protected from termination by Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// One or more subnet IDs, if applicable, separated by commas. If you specify VPCZoneIdentifier and AvailabilityZones, ensure that the Availability Zones of the subnets match the values for AvailabilityZones.
        public let vPCZoneIdentifier: String?
        /// The tags for the group.
        public let tags: [TagDescription]?
        /// The maximum size of the group.
        public let maxSize: Int32
        /// The suspended processes associated with the group.
        public let suspendedProcesses: [SuspendedProcess]?
        /// The Amazon Resource Names (ARN) of the target groups for your load balancer.
        public let targetGroupARNs: [String]?
        /// The date and time the group was created.
        public let createdTime: TimeStamp
        /// The current state of the group when DeleteAutoScalingGroup is in progress.
        public let status: String?
        /// The minimum size of the group.
        public let minSize: Int32
        /// The desired size of the group.
        public let desiredCapacity: Int32
        /// The Amazon Resource Name (ARN) of the Auto Scaling group.
        public let autoScalingGroupARN: String?
        /// The name of the placement group into which you'll launch your instances, if any. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
        public let placementGroup: String?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start.
        public let defaultCooldown: Int32
        /// The EC2 instances associated with the group.
        public let instances: [Instance]?
        /// The termination policies for the group.
        public let terminationPolicies: [String]?
        /// The launch template for the group.
        public let launchTemplate: LaunchTemplateSpecification?
        /// The amount of time, in seconds, that Auto Scaling waits before checking the health status of an EC2 instance that has come into service.
        public let healthCheckGracePeriod: Int32?
        /// One or more load balancers associated with the group.
        public let loadBalancerNames: [String]?
        /// The service to use for the health checks. The valid values are EC2 and ELB.
        public let healthCheckType: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(availabilityZones: [String], enabledMetrics: [EnabledMetric]? = nil, launchConfigurationName: String? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, vPCZoneIdentifier: String? = nil, tags: [TagDescription]? = nil, maxSize: Int32, suspendedProcesses: [SuspendedProcess]? = nil, targetGroupARNs: [String]? = nil, createdTime: TimeStamp, status: String? = nil, minSize: Int32, desiredCapacity: Int32, autoScalingGroupARN: String? = nil, placementGroup: String? = nil, defaultCooldown: Int32, instances: [Instance]? = nil, terminationPolicies: [String]? = nil, launchTemplate: LaunchTemplateSpecification? = nil, healthCheckGracePeriod: Int32? = nil, loadBalancerNames: [String]? = nil, healthCheckType: String, autoScalingGroupName: String) {
            self.availabilityZones = availabilityZones
            self.enabledMetrics = enabledMetrics
            self.launchConfigurationName = launchConfigurationName
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.tags = tags
            self.maxSize = maxSize
            self.suspendedProcesses = suspendedProcesses
            self.targetGroupARNs = targetGroupARNs
            self.createdTime = createdTime
            self.status = status
            self.minSize = minSize
            self.desiredCapacity = desiredCapacity
            self.autoScalingGroupARN = autoScalingGroupARN
            self.placementGroup = placementGroup
            self.defaultCooldown = defaultCooldown
            self.instances = instances
            self.terminationPolicies = terminationPolicies
            self.launchTemplate = launchTemplate
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.loadBalancerNames = loadBalancerNames
            self.healthCheckType = healthCheckType
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case enabledMetrics = "EnabledMetrics"
            case launchConfigurationName = "LaunchConfigurationName"
            case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
            case vPCZoneIdentifier = "VPCZoneIdentifier"
            case tags = "Tags"
            case maxSize = "MaxSize"
            case suspendedProcesses = "SuspendedProcesses"
            case targetGroupARNs = "TargetGroupARNs"
            case createdTime = "CreatedTime"
            case status = "Status"
            case minSize = "MinSize"
            case desiredCapacity = "DesiredCapacity"
            case autoScalingGroupARN = "AutoScalingGroupARN"
            case placementGroup = "PlacementGroup"
            case defaultCooldown = "DefaultCooldown"
            case instances = "Instances"
            case terminationPolicies = "TerminationPolicies"
            case launchTemplate = "LaunchTemplate"
            case healthCheckGracePeriod = "HealthCheckGracePeriod"
            case loadBalancerNames = "LoadBalancerNames"
            case healthCheckType = "HealthCheckType"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct CustomizedMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MetricName", required: true, type: .string),
            AWSShapeMember(label: "Namespace", required: true, type: .string),
            AWSShapeMember(label: "Unit", required: false, type: .string),
            AWSShapeMember(label: "Dimensions", required: false, type: .list),
            AWSShapeMember(label: "Statistic", required: true, type: .enum)
        ]
        /// The name of the metric.
        public let metricName: String
        /// The namespace of the metric.
        public let namespace: String
        /// The unit of the metric.
        public let unit: String?
        /// The dimensions of the metric.
        public let dimensions: [MetricDimension]?
        /// The statistic of the metric.
        public let statistic: MetricStatistic

        public init(metricName: String, namespace: String, unit: String? = nil, dimensions: [MetricDimension]? = nil, statistic: MetricStatistic) {
            self.metricName = metricName
            self.namespace = namespace
            self.unit = unit
            self.dimensions = dimensions
            self.statistic = statistic
        }

        private enum CodingKeys: String, CodingKey {
            case metricName = "MetricName"
            case namespace = "Namespace"
            case unit = "Unit"
            case dimensions = "Dimensions"
            case statistic = "Statistic"
        }
    }

    public struct DescribeLifecycleHookTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHookTypes", required: false, type: .list)
        ]
        /// The lifecycle hook types.
        public let lifecycleHookTypes: [String]?

        public init(lifecycleHookTypes: [String]? = nil) {
            self.lifecycleHookTypes = lifecycleHookTypes
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHookTypes = "LifecycleHookTypes"
        }
    }

    public struct DescribeNotificationConfigurationsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "AutoScalingGroupNames", required: false, type: .list)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupNames: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, autoScalingGroupNames: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.autoScalingGroupNames = autoScalingGroupNames
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case autoScalingGroupNames = "AutoScalingGroupNames"
        }
    }

    public struct Ebs: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "SnapshotId", required: false, type: .string),
            AWSShapeMember(label: "DeleteOnTermination", required: false, type: .boolean),
            AWSShapeMember(label: "VolumeType", required: false, type: .string),
            AWSShapeMember(label: "VolumeSize", required: false, type: .integer),
            AWSShapeMember(label: "Iops", required: false, type: .integer),
            AWSShapeMember(label: "Encrypted", required: false, type: .boolean)
        ]
        /// The ID of the snapshot.
        public let snapshotId: String?
        /// Indicates whether the volume is deleted on instance termination. Default: true
        public let deleteOnTermination: Bool?
        /// The volume type. For more information, see Amazon EBS Volume Types in the Amazon Elastic Compute Cloud User Guide. Valid values: standard | io1 | gp2  Default: standard
        public let volumeType: String?
        /// The volume size, in GiB. For standard volumes, specify a value from 1 to 1,024. For io1 volumes, specify a value from 4 to 16,384. For gp2 volumes, specify a value from 1 to 16,384. If you specify a snapshot, the volume size must be equal to or larger than the snapshot size. Default: If you create a volume from a snapshot and you don't specify a volume size, the default is the snapshot size.
        public let volumeSize: Int32?
        /// The number of I/O operations per second (IOPS) to provision for the volume. Constraint: Required when the volume type is io1.
        public let iops: Int32?
        /// Indicates whether the volume should be encrypted. Encrypted EBS volumes must be attached to instances that support Amazon EBS encryption. Volumes that are created from encrypted snapshots are automatically encrypted. There is no way to create an encrypted volume from an unencrypted snapshot or an unencrypted volume from an encrypted snapshot. For more information, see Amazon EBS Encryption in the Amazon Elastic Compute Cloud User Guide.
        public let encrypted: Bool?

        public init(snapshotId: String? = nil, deleteOnTermination: Bool? = nil, volumeType: String? = nil, volumeSize: Int32? = nil, iops: Int32? = nil, encrypted: Bool? = nil) {
            self.snapshotId = snapshotId
            self.deleteOnTermination = deleteOnTermination
            self.volumeType = volumeType
            self.volumeSize = volumeSize
            self.iops = iops
            self.encrypted = encrypted
        }

        private enum CodingKeys: String, CodingKey {
            case snapshotId = "SnapshotId"
            case deleteOnTermination = "DeleteOnTermination"
            case volumeType = "VolumeType"
            case volumeSize = "VolumeSize"
            case iops = "Iops"
            case encrypted = "Encrypted"
        }
    }

    public struct DescribeLoadBalancerTargetGroupsRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, autoScalingGroupName: String) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public enum ScalingActivityStatusCode: String, CustomStringConvertible, Codable {
        case pendingspotbidplacement = "PendingSpotBidPlacement"
        case waitingforspotinstancerequestid = "WaitingForSpotInstanceRequestId"
        case waitingforspotinstanceid = "WaitingForSpotInstanceId"
        case waitingforinstanceid = "WaitingForInstanceId"
        case preinservice = "PreInService"
        case inprogress = "InProgress"
        case waitingforelbconnectiondraining = "WaitingForELBConnectionDraining"
        case midlifecycleaction = "MidLifecycleAction"
        case waitingforinstancewarmup = "WaitingForInstanceWarmup"
        case successful = "Successful"
        case failed = "Failed"
        case cancelled = "Cancelled"
        public var description: String { return self.rawValue }
    }

    public struct DescribeScalingActivitiesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string),
            AWSShapeMember(label: "ActivityIds", required: false, type: .list),
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of items to return with this call. The default value is 100.
        public let maxRecords: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// The activity IDs of the desired scaling activities. If you omit this parameter, all activities for the past six weeks are described. If you specify an Auto Scaling group, the results are limited to that group. The list of requested activities cannot contain more than 50 items. If unknown activities are requested, they are ignored with no error.
        public let activityIds: [String]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxRecords: Int32? = nil, autoScalingGroupName: String? = nil, activityIds: [String]? = nil, nextToken: String? = nil) {
            self.maxRecords = maxRecords
            self.autoScalingGroupName = autoScalingGroupName
            self.activityIds = activityIds
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case autoScalingGroupName = "AutoScalingGroupName"
            case activityIds = "ActivityIds"
            case nextToken = "NextToken"
        }
    }

    public struct DetachInstancesQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShouldDecrementDesiredCapacity", required: true, type: .boolean),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "InstanceIds", required: false, type: .list)
        ]
        /// If True, the Auto Scaling group decrements the desired capacity value by the number of instances detached.
        public let shouldDecrementDesiredCapacity: Bool
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more instance IDs.
        public let instanceIds: [String]?

        public init(shouldDecrementDesiredCapacity: Bool, autoScalingGroupName: String, instanceIds: [String]? = nil) {
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
        }
    }

    public struct DescribePoliciesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string),
            AWSShapeMember(label: "PolicyTypes", required: false, type: .list),
            AWSShapeMember(label: "PolicyNames", required: false, type: .list),
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The maximum number of items to be returned with each call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// One or more policy types. Valid values are SimpleScaling and StepScaling.
        public let policyTypes: [String]?
        /// The names of one or more policies. If you omit this parameter, all policies are described. If an group name is provided, the results are limited to that group. This list is limited to 50 items. If you specify an unknown policy name, it is ignored with no error.
        public let policyNames: [String]?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?

        public init(maxRecords: Int32? = nil, autoScalingGroupName: String? = nil, policyTypes: [String]? = nil, policyNames: [String]? = nil, nextToken: String? = nil) {
            self.maxRecords = maxRecords
            self.autoScalingGroupName = autoScalingGroupName
            self.policyTypes = policyTypes
            self.policyNames = policyNames
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case autoScalingGroupName = "AutoScalingGroupName"
            case policyTypes = "PolicyTypes"
            case policyNames = "PolicyNames"
            case nextToken = "NextToken"
        }
    }

    public struct DeleteNotificationConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicARN", required: true, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic.
        public let topicARN: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(topicARN: String, autoScalingGroupName: String) {
            self.topicARN = topicARN
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case topicARN = "TopicARN"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct PoliciesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "ScalingPolicies", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The scaling policies.
        public let scalingPolicies: [ScalingPolicy]?

        public init(nextToken: String? = nil, scalingPolicies: [ScalingPolicy]? = nil) {
            self.nextToken = nextToken
            self.scalingPolicies = scalingPolicies
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scalingPolicies = "ScalingPolicies"
        }
    }

    public struct PutLifecycleHookAnswer: AWSShape {

    }

    public struct LaunchConfigurationNameType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchConfigurationName", required: true, type: .string)
        ]
        /// The name of the launch configuration.
        public let launchConfigurationName: String

        public init(launchConfigurationName: String) {
            self.launchConfigurationName = launchConfigurationName
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurationName = "LaunchConfigurationName"
        }
    }

    public struct LifecycleHookSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationTargetARN", required: false, type: .string),
            AWSShapeMember(label: "NotificationMetadata", required: false, type: .string),
            AWSShapeMember(label: "DefaultResult", required: false, type: .string),
            AWSShapeMember(label: "RoleARN", required: false, type: .string),
            AWSShapeMember(label: "HeartbeatTimeout", required: false, type: .integer),
            AWSShapeMember(label: "LifecycleTransition", required: true, type: .string),
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string)
        ]
        /// The ARN of the target that Auto Scaling sends notifications to when an instance is in the transition state for the lifecycle hook. The notification target can be either an SQS queue or an SNS topic.
        public let notificationTargetARN: String?
        /// Additional information that you want to include any time Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON.
        public let defaultResult: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
        public let roleARN: String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat.
        public let heartbeatTimeout: Int32?
        /// The state of the EC2 instance to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see DescribeLifecycleHookTypes.
        public let lifecycleTransition: String
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String

        public init(notificationTargetARN: String? = nil, notificationMetadata: String? = nil, defaultResult: String? = nil, roleARN: String? = nil, heartbeatTimeout: Int32? = nil, lifecycleTransition: String, lifecycleHookName: String) {
            self.notificationTargetARN = notificationTargetARN
            self.notificationMetadata = notificationMetadata
            self.defaultResult = defaultResult
            self.roleARN = roleARN
            self.heartbeatTimeout = heartbeatTimeout
            self.lifecycleTransition = lifecycleTransition
            self.lifecycleHookName = lifecycleHookName
        }

        private enum CodingKeys: String, CodingKey {
            case notificationTargetARN = "NotificationTargetARN"
            case notificationMetadata = "NotificationMetadata"
            case defaultResult = "DefaultResult"
            case roleARN = "RoleARN"
            case heartbeatTimeout = "HeartbeatTimeout"
            case lifecycleTransition = "LifecycleTransition"
            case lifecycleHookName = "LifecycleHookName"
        }
    }

    public struct DescribeAccountLimitsAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxNumberOfLaunchConfigurations", required: false, type: .integer),
            AWSShapeMember(label: "NumberOfLaunchConfigurations", required: false, type: .integer),
            AWSShapeMember(label: "NumberOfAutoScalingGroups", required: false, type: .integer),
            AWSShapeMember(label: "MaxNumberOfAutoScalingGroups", required: false, type: .integer)
        ]
        /// The maximum number of launch configurations allowed for your AWS account. The default limit is 100 per region.
        public let maxNumberOfLaunchConfigurations: Int32?
        /// The current number of launch configurations for your AWS account.
        public let numberOfLaunchConfigurations: Int32?
        /// The current number of groups for your AWS account.
        public let numberOfAutoScalingGroups: Int32?
        /// The maximum number of groups allowed for your AWS account. The default limit is 20 per region.
        public let maxNumberOfAutoScalingGroups: Int32?

        public init(maxNumberOfLaunchConfigurations: Int32? = nil, numberOfLaunchConfigurations: Int32? = nil, numberOfAutoScalingGroups: Int32? = nil, maxNumberOfAutoScalingGroups: Int32? = nil) {
            self.maxNumberOfLaunchConfigurations = maxNumberOfLaunchConfigurations
            self.numberOfLaunchConfigurations = numberOfLaunchConfigurations
            self.numberOfAutoScalingGroups = numberOfAutoScalingGroups
            self.maxNumberOfAutoScalingGroups = maxNumberOfAutoScalingGroups
        }

        private enum CodingKeys: String, CodingKey {
            case maxNumberOfLaunchConfigurations = "MaxNumberOfLaunchConfigurations"
            case numberOfLaunchConfigurations = "NumberOfLaunchConfigurations"
            case numberOfAutoScalingGroups = "NumberOfAutoScalingGroups"
            case maxNumberOfAutoScalingGroups = "MaxNumberOfAutoScalingGroups"
        }
    }

    public struct CompleteLifecycleActionAnswer: AWSShape {

    }

    public struct PolicyARNType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Alarms", required: false, type: .list),
            AWSShapeMember(label: "PolicyARN", required: false, type: .string)
        ]
        /// The CloudWatch alarms created for the target tracking policy.
        public let alarms: [Alarm]?
        /// The Amazon Resource Name (ARN) of the policy.
        public let policyARN: String?

        public init(alarms: [Alarm]? = nil, policyARN: String? = nil) {
            self.alarms = alarms
            self.policyARN = policyARN
        }

        private enum CodingKeys: String, CodingKey {
            case alarms = "Alarms"
            case policyARN = "PolicyARN"
        }
    }

    public struct SuspendedProcess: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProcessName", required: false, type: .string),
            AWSShapeMember(label: "SuspensionReason", required: false, type: .string)
        ]
        /// The name of the suspended process.
        public let processName: String?
        /// The reason that the process was suspended.
        public let suspensionReason: String?

        public init(processName: String? = nil, suspensionReason: String? = nil) {
            self.processName = processName
            self.suspensionReason = suspensionReason
        }

        private enum CodingKeys: String, CodingKey {
            case processName = "ProcessName"
            case suspensionReason = "SuspensionReason"
        }
    }

    public struct CreateLaunchConfigurationType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "BlockDeviceMappings", required: false, type: .list),
            AWSShapeMember(label: "LaunchConfigurationName", required: true, type: .string),
            AWSShapeMember(label: "UserData", required: false, type: .string),
            AWSShapeMember(label: "ClassicLinkVPCSecurityGroups", required: false, type: .list),
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean),
            AWSShapeMember(label: "SpotPrice", required: false, type: .string),
            AWSShapeMember(label: "KernelId", required: false, type: .string),
            AWSShapeMember(label: "InstanceMonitoring", required: false, type: .structure),
            AWSShapeMember(label: "ClassicLinkVPCId", required: false, type: .string),
            AWSShapeMember(label: "InstanceType", required: false, type: .string),
            AWSShapeMember(label: "PlacementTenancy", required: false, type: .string),
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list),
            AWSShapeMember(label: "KeyName", required: false, type: .string),
            AWSShapeMember(label: "InstanceId", required: false, type: .string),
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .string),
            AWSShapeMember(label: "ImageId", required: false, type: .string),
            AWSShapeMember(label: "AssociatePublicIpAddress", required: false, type: .boolean),
            AWSShapeMember(label: "RamdiskId", required: false, type: .string)
        ]
        /// One or more mappings that specify how block devices are exposed to the instance. For more information, see Block Device Mapping in the Amazon Elastic Compute Cloud User Guide.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// The name of the launch configuration. This name must be unique within the scope of your AWS account.
        public let launchConfigurationName: String
        /// The user data to make available to the launched EC2 instances. For more information, see Instance Metadata and User Data in the Amazon Elastic Compute Cloud User Guide.
        public let userData: String?
        /// The IDs of one or more security groups for the specified ClassicLink-enabled VPC. This parameter is required if you specify a ClassicLink-enabled VPC, and is not supported otherwise. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCSecurityGroups: [String]?
        /// Indicates whether the instance is optimized for Amazon EBS I/O. By default, the instance is not optimized for EBS I/O. The optimization provides dedicated throughput to Amazon EBS and an optimized configuration stack to provide optimal I/O performance. This optimization is not available with all instance types. Additional usage charges apply. For more information, see Amazon EBS-Optimized Instances in the Amazon Elastic Compute Cloud User Guide.
        public let ebsOptimized: Bool?
        /// The maximum hourly price to be paid for any Spot Instance launched to fulfill the request. Spot Instances are launched when the price you specify exceeds the current Spot market price. For more information, see Launching Spot Instances in Your Auto Scaling Group in the Auto Scaling User Guide.
        public let spotPrice: String?
        /// The ID of the kernel associated with the AMI.
        public let kernelId: String?
        /// Enables detailed monitoring (true) or basic monitoring (false) for the Auto Scaling instances. The default is true.
        public let instanceMonitoring: InstanceMonitoring?
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. This parameter is supported only if you are launching EC2-Classic instances. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCId: String?
        /// The instance type of the EC2 instance. If you do not specify InstanceId, you must specify InstanceType. For information about available instance types, see Available Instance Types in the Amazon Elastic Compute Cloud User Guide.
        public let instanceType: String?
        /// The tenancy of the instance. An instance with a tenancy of dedicated runs on single-tenant hardware and can only be launched into a VPC. You must set the value of this parameter to dedicated if want to launch Dedicated Instances into a shared tenancy VPC (VPC with instance placement tenancy attribute set to default). If you specify this parameter, be sure to specify at least one subnet when you create your group. For more information, see Launching Auto Scaling Instances in a VPC in the Auto Scaling User Guide. Valid values: default | dedicated
        public let placementTenancy: String?
        /// One or more security groups with which to associate the instances. If your instances are launched in EC2-Classic, you can either specify security group names or the security group IDs. For more information about security groups for EC2-Classic, see Amazon EC2 Security Groups in the Amazon Elastic Compute Cloud User Guide. If your instances are launched into a VPC, specify security group IDs. For more information, see Security Groups for Your VPC in the Amazon Virtual Private Cloud User Guide.
        public let securityGroups: [String]?
        /// The name of the key pair. For more information, see Amazon EC2 Key Pairs in the Amazon Elastic Compute Cloud User Guide.
        public let keyName: String?
        /// The ID of the instance to use to create the launch configuration. The new launch configuration derives attributes from the instance, with the exception of the block device mapping. If you do not specify InstanceId, you must specify both ImageId and InstanceType. To create a launch configuration with a block device mapping or override any other instance attributes, specify them as part of the same request. For more information, see Create a Launch Configuration Using an EC2 Instance in the Auto Scaling User Guide.
        public let instanceId: String?
        /// The name or the Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance. EC2 instances launched with an IAM role will automatically have AWS security credentials available. You can use IAM roles with Auto Scaling to automatically enable applications running on your EC2 instances to securely access other AWS resources. For more information, see Launch Auto Scaling Instances with an IAM Role in the Auto Scaling User Guide.
        public let iamInstanceProfile: String?
        /// The ID of the Amazon Machine Image (AMI) to use to launch your EC2 instances. If you do not specify InstanceId, you must specify ImageId. For more information, see Finding an AMI in the Amazon Elastic Compute Cloud User Guide.
        public let imageId: String?
        /// Used for groups that launch instances into a virtual private cloud (VPC). Specifies whether to assign a public IP address to each instance. For more information, see Launching Auto Scaling Instances in a VPC in the Auto Scaling User Guide. If you specify this parameter, be sure to specify at least one subnet when you create your group. Default: If the instance is launched into a default subnet, the default is true. If the instance is launched into a nondefault subnet, the default is false. For more information, see Supported Platforms in the Amazon Elastic Compute Cloud User Guide.
        public let associatePublicIpAddress: Bool?
        /// The ID of the RAM disk associated with the AMI.
        public let ramdiskId: String?

        public init(blockDeviceMappings: [BlockDeviceMapping]? = nil, launchConfigurationName: String, userData: String? = nil, classicLinkVPCSecurityGroups: [String]? = nil, ebsOptimized: Bool? = nil, spotPrice: String? = nil, kernelId: String? = nil, instanceMonitoring: InstanceMonitoring? = nil, classicLinkVPCId: String? = nil, instanceType: String? = nil, placementTenancy: String? = nil, securityGroups: [String]? = nil, keyName: String? = nil, instanceId: String? = nil, iamInstanceProfile: String? = nil, imageId: String? = nil, associatePublicIpAddress: Bool? = nil, ramdiskId: String? = nil) {
            self.blockDeviceMappings = blockDeviceMappings
            self.launchConfigurationName = launchConfigurationName
            self.userData = userData
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.ebsOptimized = ebsOptimized
            self.spotPrice = spotPrice
            self.kernelId = kernelId
            self.instanceMonitoring = instanceMonitoring
            self.classicLinkVPCId = classicLinkVPCId
            self.instanceType = instanceType
            self.placementTenancy = placementTenancy
            self.securityGroups = securityGroups
            self.keyName = keyName
            self.instanceId = instanceId
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.associatePublicIpAddress = associatePublicIpAddress
            self.ramdiskId = ramdiskId
        }

        private enum CodingKeys: String, CodingKey {
            case blockDeviceMappings = "BlockDeviceMappings"
            case launchConfigurationName = "LaunchConfigurationName"
            case userData = "UserData"
            case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
            case ebsOptimized = "EbsOptimized"
            case spotPrice = "SpotPrice"
            case kernelId = "KernelId"
            case instanceMonitoring = "InstanceMonitoring"
            case classicLinkVPCId = "ClassicLinkVPCId"
            case instanceType = "InstanceType"
            case placementTenancy = "PlacementTenancy"
            case securityGroups = "SecurityGroups"
            case keyName = "KeyName"
            case instanceId = "InstanceId"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case associatePublicIpAddress = "AssociatePublicIpAddress"
            case ramdiskId = "RamdiskId"
        }
    }

    public struct DescribeLifecycleHooksAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHooks", required: false, type: .list)
        ]
        /// The lifecycle hooks for the specified group.
        public let lifecycleHooks: [LifecycleHook]?

        public init(lifecycleHooks: [LifecycleHook]? = nil) {
            self.lifecycleHooks = lifecycleHooks
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHooks = "LifecycleHooks"
        }
    }

    public struct DescribeAutoScalingInstancesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "InstanceIds", required: false, type: .list)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The instances to describe; up to 50 instance IDs. If you omit this parameter, all Auto Scaling instances are described. If you specify an ID that does not exist, it is ignored with no error.
        public let instanceIds: [String]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, instanceIds: [String]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case instanceIds = "InstanceIds"
        }
    }

    public struct AutoScalingInstancesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingInstances", required: false, type: .list),
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The instances.
        public let autoScalingInstances: [AutoScalingInstanceDetails]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(autoScalingInstances: [AutoScalingInstanceDetails]? = nil, nextToken: String? = nil) {
            self.autoScalingInstances = autoScalingInstances
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingInstances = "AutoScalingInstances"
            case nextToken = "NextToken"
        }
    }

    public struct NotificationConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TopicARN", required: false, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string),
            AWSShapeMember(label: "NotificationType", required: false, type: .string)
        ]
        /// The Amazon Resource Name (ARN) of the Amazon Simple Notification Service (SNS) topic.
        public let topicARN: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String?
        /// One of the following event notification types:    autoscaling:EC2_INSTANCE_LAUNCH     autoscaling:EC2_INSTANCE_LAUNCH_ERROR     autoscaling:EC2_INSTANCE_TERMINATE     autoscaling:EC2_INSTANCE_TERMINATE_ERROR     autoscaling:TEST_NOTIFICATION
        public let notificationType: String?

        public init(topicARN: String? = nil, autoScalingGroupName: String? = nil, notificationType: String? = nil) {
            self.topicARN = topicARN
            self.autoScalingGroupName = autoScalingGroupName
            self.notificationType = notificationType
        }

        private enum CodingKeys: String, CodingKey {
            case topicARN = "TopicARN"
            case autoScalingGroupName = "AutoScalingGroupName"
            case notificationType = "NotificationType"
        }
    }

    public struct DescribeMetricCollectionTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Granularities", required: false, type: .list),
            AWSShapeMember(label: "Metrics", required: false, type: .list)
        ]
        /// The granularities for the metrics.
        public let granularities: [MetricGranularityType]?
        /// One or more metrics.
        public let metrics: [MetricCollectionType]?

        public init(granularities: [MetricGranularityType]? = nil, metrics: [MetricCollectionType]? = nil) {
            self.granularities = granularities
            self.metrics = metrics
        }

        private enum CodingKeys: String, CodingKey {
            case granularities = "Granularities"
            case metrics = "Metrics"
        }
    }

    public struct DetachInstancesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", required: false, type: .list)
        ]
        /// The activities related to detaching the instances from the Auto Scaling group.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
        }
    }

    public struct DetachLoadBalancerTargetGroupsResultType: AWSShape {

    }

    public struct AttachLoadBalancerTargetGroupsResultType: AWSShape {

    }

    public struct InstanceMonitoring: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Enabled", required: false, type: .boolean)
        ]
        /// If true, detailed monitoring is enabled. Otherwise, basic monitoring is enabled.
        public let enabled: Bool?

        public init(enabled: Bool? = nil) {
            self.enabled = enabled
        }

        private enum CodingKeys: String, CodingKey {
            case enabled = "Enabled"
        }
    }

    public struct ExitStandbyAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", required: false, type: .list)
        ]
        /// The activities related to moving instances out of Standby mode.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
        }
    }

    public struct TerminateInstanceInAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShouldDecrementDesiredCapacity", required: true, type: .boolean),
            AWSShapeMember(label: "InstanceId", required: true, type: .string)
        ]
        /// If true, terminating the instance also decrements the size of the Auto Scaling group.
        public let shouldDecrementDesiredCapacity: Bool
        /// The ID of the instance.
        public let instanceId: String

        public init(shouldDecrementDesiredCapacity: Bool, instanceId: String) {
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
            case instanceId = "InstanceId"
        }
    }

    public struct SetDesiredCapacityType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "DesiredCapacity", required: true, type: .integer),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "HonorCooldown", required: false, type: .boolean)
        ]
        /// The number of EC2 instances that should be running in the Auto Scaling group.
        public let desiredCapacity: Int32
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// By default, SetDesiredCapacity overrides any cooldown period associated with the Auto Scaling group. Specify True to make Auto Scaling to wait for the cool-down period associated with the Auto Scaling group to complete before initiating a scaling activity to set your Auto Scaling group to its new capacity.
        public let honorCooldown: Bool?

        public init(desiredCapacity: Int32, autoScalingGroupName: String, honorCooldown: Bool? = nil) {
            self.desiredCapacity = desiredCapacity
            self.autoScalingGroupName = autoScalingGroupName
            self.honorCooldown = honorCooldown
        }

        private enum CodingKeys: String, CodingKey {
            case desiredCapacity = "DesiredCapacity"
            case autoScalingGroupName = "AutoScalingGroupName"
            case honorCooldown = "HonorCooldown"
        }
    }

    public struct DescribeTerminationPolicyTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TerminationPolicyTypes", required: false, type: .list)
        ]
        /// The termination policies supported by Auto Scaling (OldestInstance, OldestLaunchConfiguration, NewestInstance, ClosestToNextInstanceHour, and Default).
        public let terminationPolicyTypes: [String]?

        public init(terminationPolicyTypes: [String]? = nil) {
            self.terminationPolicyTypes = terminationPolicyTypes
        }

        private enum CodingKeys: String, CodingKey {
            case terminationPolicyTypes = "TerminationPolicyTypes"
        }
    }

    public struct RecordLifecycleActionHeartbeatAnswer: AWSShape {

    }

    public struct Activity: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "StartTime", required: true, type: .timestamp),
            AWSShapeMember(label: "Details", required: false, type: .string),
            AWSShapeMember(label: "Progress", required: false, type: .integer),
            AWSShapeMember(label: "Cause", required: true, type: .string),
            AWSShapeMember(label: "EndTime", required: false, type: .timestamp),
            AWSShapeMember(label: "StatusCode", required: true, type: .enum),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "ActivityId", required: true, type: .string),
            AWSShapeMember(label: "StatusMessage", required: false, type: .string),
            AWSShapeMember(label: "Description", required: false, type: .string)
        ]
        /// The start time of the activity.
        public let startTime: TimeStamp
        /// The details about the activity.
        public let details: String?
        /// A value between 0 and 100 that indicates the progress of the activity.
        public let progress: Int32?
        /// The reason the activity began.
        public let cause: String
        /// The end time of the activity.
        public let endTime: TimeStamp?
        /// The current status of the activity.
        public let statusCode: ScalingActivityStatusCode
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The ID of the activity.
        public let activityId: String
        /// A friendly, more verbose description of the activity status.
        public let statusMessage: String?
        /// A friendly, more verbose description of the activity.
        public let description: String?

        public init(startTime: TimeStamp, details: String? = nil, progress: Int32? = nil, cause: String, endTime: TimeStamp? = nil, statusCode: ScalingActivityStatusCode, autoScalingGroupName: String, activityId: String, statusMessage: String? = nil, description: String? = nil) {
            self.startTime = startTime
            self.details = details
            self.progress = progress
            self.cause = cause
            self.endTime = endTime
            self.statusCode = statusCode
            self.autoScalingGroupName = autoScalingGroupName
            self.activityId = activityId
            self.statusMessage = statusMessage
            self.description = description
        }

        private enum CodingKeys: String, CodingKey {
            case startTime = "StartTime"
            case details = "Details"
            case progress = "Progress"
            case cause = "Cause"
            case endTime = "EndTime"
            case statusCode = "StatusCode"
            case autoScalingGroupName = "AutoScalingGroupName"
            case activityId = "ActivityId"
            case statusMessage = "StatusMessage"
            case description = "Description"
        }
    }

    public struct SetInstanceHealthQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "InstanceId", required: true, type: .string),
            AWSShapeMember(label: "HealthStatus", required: true, type: .string),
            AWSShapeMember(label: "ShouldRespectGracePeriod", required: false, type: .boolean)
        ]
        /// The ID of the instance.
        public let instanceId: String
        /// The health status of the instance. Set to Healthy if you want the instance to remain in service. Set to Unhealthy if you want the instance to be out of service. Auto Scaling will terminate and replace the unhealthy instance.
        public let healthStatus: String
        /// If the Auto Scaling group of the specified instance has a HealthCheckGracePeriod specified for the group, by default, this call will respect the grace period. Set this to False, if you do not want the call to respect the grace period associated with the group. For more information, see the description of the health check grace period for CreateAutoScalingGroup.
        public let shouldRespectGracePeriod: Bool?

        public init(instanceId: String, healthStatus: String, shouldRespectGracePeriod: Bool? = nil) {
            self.instanceId = instanceId
            self.healthStatus = healthStatus
            self.shouldRespectGracePeriod = shouldRespectGracePeriod
        }

        private enum CodingKeys: String, CodingKey {
            case instanceId = "InstanceId"
            case healthStatus = "HealthStatus"
            case shouldRespectGracePeriod = "ShouldRespectGracePeriod"
        }
    }

    public struct DescribeAdjustmentTypesAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AdjustmentTypes", required: false, type: .list)
        ]
        /// The policy adjustment types.
        public let adjustmentTypes: [AdjustmentType]?

        public init(adjustmentTypes: [AdjustmentType]? = nil) {
            self.adjustmentTypes = adjustmentTypes
        }

        private enum CodingKeys: String, CodingKey {
            case adjustmentTypes = "AdjustmentTypes"
        }
    }

    public struct ScheduledActionsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "ScheduledUpdateGroupActions", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The scheduled actions.
        public let scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]?

        public init(nextToken: String? = nil, scheduledUpdateGroupActions: [ScheduledUpdateGroupAction]? = nil) {
            self.nextToken = nextToken
            self.scheduledUpdateGroupActions = scheduledUpdateGroupActions
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case scheduledUpdateGroupActions = "ScheduledUpdateGroupActions"
        }
    }

    public struct ActivitiesType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", required: true, type: .list),
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// The scaling activities. Activities are sorted by start time. Activities still in progress are described first.
        public let activities: [Activity]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(activities: [Activity], nextToken: String? = nil) {
            self.activities = activities
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
            case nextToken = "NextToken"
        }
    }

    public struct EnterStandbyAnswer: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Activities", required: false, type: .list)
        ]
        /// The activities related to moving instances into Standby mode.
        public let activities: [Activity]?

        public init(activities: [Activity]? = nil) {
            self.activities = activities
        }

        private enum CodingKeys: String, CodingKey {
            case activities = "Activities"
        }
    }

    public struct MetricCollectionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Metric", required: false, type: .string)
        ]
        /// One of the following metrics:    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances
        public let metric: String?

        public init(metric: String? = nil) {
            self.metric = metric
        }

        private enum CodingKeys: String, CodingKey {
            case metric = "Metric"
        }
    }

    public struct UpdateAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AvailabilityZones", required: false, type: .list),
            AWSShapeMember(label: "LaunchConfigurationName", required: false, type: .string),
            AWSShapeMember(label: "NewInstancesProtectedFromScaleIn", required: false, type: .boolean),
            AWSShapeMember(label: "VPCZoneIdentifier", required: false, type: .string),
            AWSShapeMember(label: "MaxSize", required: false, type: .integer),
            AWSShapeMember(label: "MinSize", required: false, type: .integer),
            AWSShapeMember(label: "DesiredCapacity", required: false, type: .integer),
            AWSShapeMember(label: "PlacementGroup", required: false, type: .string),
            AWSShapeMember(label: "DefaultCooldown", required: false, type: .integer),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "HealthCheckGracePeriod", required: false, type: .integer),
            AWSShapeMember(label: "LaunchTemplate", required: false, type: .structure),
            AWSShapeMember(label: "TerminationPolicies", required: false, type: .list),
            AWSShapeMember(label: "HealthCheckType", required: false, type: .string)
        ]
        /// One or more Availability Zones for the group.
        public let availabilityZones: [String]?
        /// The name of the launch configuration. You must specify either a launch configuration or a launch template.
        public let launchConfigurationName: String?
        /// Indicates whether newly launched instances are protected from termination by Auto Scaling when scaling in.
        public let newInstancesProtectedFromScaleIn: Bool?
        /// The ID of the subnet, if you are launching into a VPC. You can specify several subnets in a comma-separated list. When you specify VPCZoneIdentifier with AvailabilityZones, ensure that the subnets' Availability Zones match the values you specify for AvailabilityZones. For more information, see Launching Auto Scaling Instances in a VPC in the Auto Scaling User Guide.
        public let vPCZoneIdentifier: String?
        /// The maximum size of the Auto Scaling group.
        public let maxSize: Int32?
        /// The minimum size of the Auto Scaling group.
        public let minSize: Int32?
        /// The number of EC2 instances that should be running in the Auto Scaling group. This number must be greater than or equal to the minimum size of the group and less than or equal to the maximum size of the group.
        public let desiredCapacity: Int32?
        /// The name of the placement group into which you'll launch your instances, if any. For more information, see Placement Groups in the Amazon Elastic Compute Cloud User Guide.
        public let placementGroup: String?
        /// The amount of time, in seconds, after a scaling activity completes before another scaling activity can start. The default is 300. For more information, see Auto Scaling Cooldowns in the Auto Scaling User Guide.
        public let defaultCooldown: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The amount of time, in seconds, that Auto Scaling waits before checking the health status of an EC2 instance that has come into service. The default is 0. For more information, see Health Checks in the Auto Scaling User Guide.
        public let healthCheckGracePeriod: Int32?
        /// The launch template to use to specify the updates. You must specify a launch configuration or a launch template.
        public let launchTemplate: LaunchTemplateSpecification?
        /// A standalone termination policy or a list of termination policies used to select the instance to terminate. The policies are executed in the order that they are listed. For more information, see Controlling Which Instances Auto Scaling Terminates During Scale In in the Auto Scaling User Guide.
        public let terminationPolicies: [String]?
        /// The service to use for the health checks. The valid values are EC2 and ELB.
        public let healthCheckType: String?

        public init(availabilityZones: [String]? = nil, launchConfigurationName: String? = nil, newInstancesProtectedFromScaleIn: Bool? = nil, vPCZoneIdentifier: String? = nil, maxSize: Int32? = nil, minSize: Int32? = nil, desiredCapacity: Int32? = nil, placementGroup: String? = nil, defaultCooldown: Int32? = nil, autoScalingGroupName: String, healthCheckGracePeriod: Int32? = nil, launchTemplate: LaunchTemplateSpecification? = nil, terminationPolicies: [String]? = nil, healthCheckType: String? = nil) {
            self.availabilityZones = availabilityZones
            self.launchConfigurationName = launchConfigurationName
            self.newInstancesProtectedFromScaleIn = newInstancesProtectedFromScaleIn
            self.vPCZoneIdentifier = vPCZoneIdentifier
            self.maxSize = maxSize
            self.minSize = minSize
            self.desiredCapacity = desiredCapacity
            self.placementGroup = placementGroup
            self.defaultCooldown = defaultCooldown
            self.autoScalingGroupName = autoScalingGroupName
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.launchTemplate = launchTemplate
            self.terminationPolicies = terminationPolicies
            self.healthCheckType = healthCheckType
        }

        private enum CodingKeys: String, CodingKey {
            case availabilityZones = "AvailabilityZones"
            case launchConfigurationName = "LaunchConfigurationName"
            case newInstancesProtectedFromScaleIn = "NewInstancesProtectedFromScaleIn"
            case vPCZoneIdentifier = "VPCZoneIdentifier"
            case maxSize = "MaxSize"
            case minSize = "MinSize"
            case desiredCapacity = "DesiredCapacity"
            case placementGroup = "PlacementGroup"
            case defaultCooldown = "DefaultCooldown"
            case autoScalingGroupName = "AutoScalingGroupName"
            case healthCheckGracePeriod = "HealthCheckGracePeriod"
            case launchTemplate = "LaunchTemplate"
            case terminationPolicies = "TerminationPolicies"
            case healthCheckType = "HealthCheckType"
        }
    }

    public struct DeleteLifecycleHookType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(lifecycleHookName: String, autoScalingGroupName: String) {
            self.lifecycleHookName = lifecycleHookName
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHookName = "LifecycleHookName"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct DescribeLoadBalancersResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "LoadBalancers", required: false, type: .list)
        ]
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?
        /// The load balancers.
        public let loadBalancers: [LoadBalancerState]?

        public init(nextToken: String? = nil, loadBalancers: [LoadBalancerState]? = nil) {
            self.nextToken = nextToken
            self.loadBalancers = loadBalancers
        }

        private enum CodingKeys: String, CodingKey {
            case nextToken = "NextToken"
            case loadBalancers = "LoadBalancers"
        }
    }

    public struct DeleteTagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// One or more tags.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

    public struct DescribeLoadBalancerTargetGroupsResponse: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LoadBalancerTargetGroups", required: false, type: .list),
            AWSShapeMember(label: "NextToken", required: false, type: .string)
        ]
        /// Information about the target groups.
        public let loadBalancerTargetGroups: [LoadBalancerTargetGroupState]?
        /// The token to use when requesting the next set of items. If there are no additional items to return, the string is empty.
        public let nextToken: String?

        public init(loadBalancerTargetGroups: [LoadBalancerTargetGroupState]? = nil, nextToken: String? = nil) {
            self.loadBalancerTargetGroups = loadBalancerTargetGroups
            self.nextToken = nextToken
        }

        private enum CodingKeys: String, CodingKey {
            case loadBalancerTargetGroups = "LoadBalancerTargetGroups"
            case nextToken = "NextToken"
        }
    }

    public struct DetachLoadBalancersResultType: AWSShape {

    }

    public struct EnterStandbyQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ShouldDecrementDesiredCapacity", required: true, type: .boolean),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "InstanceIds", required: false, type: .list)
        ]
        /// Specifies whether the instances moved to Standby mode count as part of the Auto Scaling group's desired capacity. If set, the desired capacity for the Auto Scaling group decrements by the number of instances moved to Standby mode.
        public let shouldDecrementDesiredCapacity: Bool
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more instances to move into Standby mode. You must specify at least one instance ID.
        public let instanceIds: [String]?

        public init(shouldDecrementDesiredCapacity: Bool, autoScalingGroupName: String, instanceIds: [String]? = nil) {
            self.shouldDecrementDesiredCapacity = shouldDecrementDesiredCapacity
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case shouldDecrementDesiredCapacity = "ShouldDecrementDesiredCapacity"
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
        }
    }

    public struct DetachLoadBalancerTargetGroupsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupARNs", required: true, type: .list),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupARNs: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(targetGroupARNs: [String], autoScalingGroupName: String) {
            self.targetGroupARNs = targetGroupARNs
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupARNs = "TargetGroupARNs"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public enum MetricType: String, CustomStringConvertible, Codable {
        case asgaveragecpuutilization = "ASGAverageCPUUtilization"
        case asgaveragenetworkin = "ASGAverageNetworkIn"
        case asgaveragenetworkout = "ASGAverageNetworkOut"
        case albrequestcountpertarget = "ALBRequestCountPerTarget"
        public var description: String { return self.rawValue }
    }

    public struct AttachLoadBalancerTargetGroupsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "TargetGroupARNs", required: true, type: .list),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The Amazon Resource Names (ARN) of the target groups.
        public let targetGroupARNs: [String]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(targetGroupARNs: [String], autoScalingGroupName: String) {
            self.targetGroupARNs = targetGroupARNs
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case targetGroupARNs = "TargetGroupARNs"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct DeleteScheduledActionType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ScheduledActionName", required: true, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The name of the action to delete.
        public let scheduledActionName: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(scheduledActionName: String, autoScalingGroupName: String) {
            self.scheduledActionName = scheduledActionName
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case scheduledActionName = "ScheduledActionName"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public enum MetricStatistic: String, CustomStringConvertible, Codable {
        case average = "Average"
        case minimum = "Minimum"
        case maximum = "Maximum"
        case samplecount = "SampleCount"
        case sum = "Sum"
        public var description: String { return self.rawValue }
    }

    public enum LifecycleState: String, CustomStringConvertible, Codable {
        case pending = "Pending"
        case pendingWait = "Pending:Wait"
        case pendingProceed = "Pending:Proceed"
        case quarantined = "Quarantined"
        case inservice = "InService"
        case terminating = "Terminating"
        case terminatingWait = "Terminating:Wait"
        case terminatingProceed = "Terminating:Proceed"
        case terminated = "Terminated"
        case detaching = "Detaching"
        case detached = "Detached"
        case enteringstandby = "EnteringStandby"
        case standby = "Standby"
        public var description: String { return self.rawValue }
    }

    public struct LifecycleHook: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NotificationTargetARN", required: false, type: .string),
            AWSShapeMember(label: "NotificationMetadata", required: false, type: .string),
            AWSShapeMember(label: "DefaultResult", required: false, type: .string),
            AWSShapeMember(label: "RoleARN", required: false, type: .string),
            AWSShapeMember(label: "HeartbeatTimeout", required: false, type: .integer),
            AWSShapeMember(label: "AutoScalingGroupName", required: false, type: .string),
            AWSShapeMember(label: "LifecycleTransition", required: false, type: .string),
            AWSShapeMember(label: "LifecycleHookName", required: false, type: .string),
            AWSShapeMember(label: "GlobalTimeout", required: false, type: .integer)
        ]
        /// The ARN of the target that Auto Scaling sends notifications to when an instance is in the transition state for the lifecycle hook. The notification target can be either an SQS queue or an SNS topic.
        public let notificationTargetARN: String?
        /// Additional information that you want to include any time Auto Scaling sends a message to the notification target.
        public let notificationMetadata: String?
        /// Defines the action the Auto Scaling group should take when the lifecycle hook timeout elapses or if an unexpected failure occurs. The valid values are CONTINUE and ABANDON. The default value is CONTINUE.
        public let defaultResult: String?
        /// The ARN of the IAM role that allows the Auto Scaling group to publish to the specified notification target.
        public let roleARN: String?
        /// The maximum time, in seconds, that can elapse before the lifecycle hook times out. If the lifecycle hook times out, Auto Scaling performs the default action. You can prevent the lifecycle hook from timing out by calling RecordLifecycleActionHeartbeat.
        public let heartbeatTimeout: Int32?
        /// The name of the Auto Scaling group for the lifecycle hook.
        public let autoScalingGroupName: String?
        /// The state of the EC2 instance to which you want to attach the lifecycle hook. For a list of lifecycle hook types, see DescribeLifecycleHookTypes.
        public let lifecycleTransition: String?
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String?
        /// The maximum time, in seconds, that an instance can remain in a Pending:Wait or Terminating:Wait state. The maximum is 172800 seconds (48 hours) or 100 times HeartbeatTimeout, whichever is smaller.
        public let globalTimeout: Int32?

        public init(notificationTargetARN: String? = nil, notificationMetadata: String? = nil, defaultResult: String? = nil, roleARN: String? = nil, heartbeatTimeout: Int32? = nil, autoScalingGroupName: String? = nil, lifecycleTransition: String? = nil, lifecycleHookName: String? = nil, globalTimeout: Int32? = nil) {
            self.notificationTargetARN = notificationTargetARN
            self.notificationMetadata = notificationMetadata
            self.defaultResult = defaultResult
            self.roleARN = roleARN
            self.heartbeatTimeout = heartbeatTimeout
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleTransition = lifecycleTransition
            self.lifecycleHookName = lifecycleHookName
            self.globalTimeout = globalTimeout
        }

        private enum CodingKeys: String, CodingKey {
            case notificationTargetARN = "NotificationTargetARN"
            case notificationMetadata = "NotificationMetadata"
            case defaultResult = "DefaultResult"
            case roleARN = "RoleARN"
            case heartbeatTimeout = "HeartbeatTimeout"
            case autoScalingGroupName = "AutoScalingGroupName"
            case lifecycleTransition = "LifecycleTransition"
            case lifecycleHookName = "LifecycleHookName"
            case globalTimeout = "GlobalTimeout"
        }
    }

    public struct EnableMetricsCollectionQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Granularity", required: true, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "Metrics", required: false, type: .list)
        ]
        /// The granularity to associate with the metrics to collect. The only valid value is 1Minute.
        public let granularity: String
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more of the following metrics. If you omit this parameter, all metrics are enabled.    GroupMinSize     GroupMaxSize     GroupDesiredCapacity     GroupInServiceInstances     GroupPendingInstances     GroupStandbyInstances     GroupTerminatingInstances     GroupTotalInstances
        public let metrics: [String]?

        public init(granularity: String, autoScalingGroupName: String, metrics: [String]? = nil) {
            self.granularity = granularity
            self.autoScalingGroupName = autoScalingGroupName
            self.metrics = metrics
        }

        private enum CodingKeys: String, CodingKey {
            case granularity = "Granularity"
            case autoScalingGroupName = "AutoScalingGroupName"
            case metrics = "Metrics"
        }
    }

    public struct LaunchConfiguration: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchConfigurationARN", required: false, type: .string),
            AWSShapeMember(label: "LaunchConfigurationName", required: true, type: .string),
            AWSShapeMember(label: "UserData", required: false, type: .string),
            AWSShapeMember(label: "ClassicLinkVPCSecurityGroups", required: false, type: .list),
            AWSShapeMember(label: "BlockDeviceMappings", required: false, type: .list),
            AWSShapeMember(label: "EbsOptimized", required: false, type: .boolean),
            AWSShapeMember(label: "SpotPrice", required: false, type: .string),
            AWSShapeMember(label: "KernelId", required: false, type: .string),
            AWSShapeMember(label: "InstanceMonitoring", required: false, type: .structure),
            AWSShapeMember(label: "ClassicLinkVPCId", required: false, type: .string),
            AWSShapeMember(label: "InstanceType", required: true, type: .string),
            AWSShapeMember(label: "CreatedTime", required: true, type: .timestamp),
            AWSShapeMember(label: "PlacementTenancy", required: false, type: .string),
            AWSShapeMember(label: "SecurityGroups", required: false, type: .list),
            AWSShapeMember(label: "KeyName", required: false, type: .string),
            AWSShapeMember(label: "IamInstanceProfile", required: false, type: .string),
            AWSShapeMember(label: "ImageId", required: true, type: .string),
            AWSShapeMember(label: "RamdiskId", required: false, type: .string),
            AWSShapeMember(label: "AssociatePublicIpAddress", required: false, type: .boolean)
        ]
        /// The Amazon Resource Name (ARN) of the launch configuration.
        public let launchConfigurationARN: String?
        /// The name of the launch configuration.
        public let launchConfigurationName: String
        /// The user data available to the instances.
        public let userData: String?
        /// The IDs of one or more security groups for the VPC specified in ClassicLinkVPCId. This parameter is required if you specify a ClassicLink-enabled VPC, and cannot be used otherwise. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCSecurityGroups: [String]?
        /// A block device mapping, which specifies the block devices for the instance.
        public let blockDeviceMappings: [BlockDeviceMapping]?
        /// Controls whether the instance is optimized for EBS I/O (true) or not (false).
        public let ebsOptimized: Bool?
        /// The price to bid when launching Spot Instances.
        public let spotPrice: String?
        /// The ID of the kernel associated with the AMI.
        public let kernelId: String?
        /// Controls whether instances in this group are launched with detailed (true) or basic (false) monitoring.
        public let instanceMonitoring: InstanceMonitoring?
        /// The ID of a ClassicLink-enabled VPC to link your EC2-Classic instances to. This parameter can only be used if you are launching EC2-Classic instances. For more information, see ClassicLink in the Amazon Elastic Compute Cloud User Guide.
        public let classicLinkVPCId: String?
        /// The instance type for the instances.
        public let instanceType: String
        /// The creation date and time for the launch configuration.
        public let createdTime: TimeStamp
        /// The tenancy of the instance, either default or dedicated. An instance with dedicated tenancy runs in an isolated, single-tenant hardware and can only be launched into a VPC.
        public let placementTenancy: String?
        /// The security groups to associate with the instances.
        public let securityGroups: [String]?
        /// The name of the key pair.
        public let keyName: String?
        /// The name or Amazon Resource Name (ARN) of the instance profile associated with the IAM role for the instance.
        public let iamInstanceProfile: String?
        /// The ID of the Amazon Machine Image (AMI).
        public let imageId: String
        /// The ID of the RAM disk associated with the AMI.
        public let ramdiskId: String?
        /// [EC2-VPC] Indicates whether to assign a public IP address to each instance.
        public let associatePublicIpAddress: Bool?

        public init(launchConfigurationARN: String? = nil, launchConfigurationName: String, userData: String? = nil, classicLinkVPCSecurityGroups: [String]? = nil, blockDeviceMappings: [BlockDeviceMapping]? = nil, ebsOptimized: Bool? = nil, spotPrice: String? = nil, kernelId: String? = nil, instanceMonitoring: InstanceMonitoring? = nil, classicLinkVPCId: String? = nil, instanceType: String, createdTime: TimeStamp, placementTenancy: String? = nil, securityGroups: [String]? = nil, keyName: String? = nil, iamInstanceProfile: String? = nil, imageId: String, ramdiskId: String? = nil, associatePublicIpAddress: Bool? = nil) {
            self.launchConfigurationARN = launchConfigurationARN
            self.launchConfigurationName = launchConfigurationName
            self.userData = userData
            self.classicLinkVPCSecurityGroups = classicLinkVPCSecurityGroups
            self.blockDeviceMappings = blockDeviceMappings
            self.ebsOptimized = ebsOptimized
            self.spotPrice = spotPrice
            self.kernelId = kernelId
            self.instanceMonitoring = instanceMonitoring
            self.classicLinkVPCId = classicLinkVPCId
            self.instanceType = instanceType
            self.createdTime = createdTime
            self.placementTenancy = placementTenancy
            self.securityGroups = securityGroups
            self.keyName = keyName
            self.iamInstanceProfile = iamInstanceProfile
            self.imageId = imageId
            self.ramdiskId = ramdiskId
            self.associatePublicIpAddress = associatePublicIpAddress
        }

        private enum CodingKeys: String, CodingKey {
            case launchConfigurationARN = "LaunchConfigurationARN"
            case launchConfigurationName = "LaunchConfigurationName"
            case userData = "UserData"
            case classicLinkVPCSecurityGroups = "ClassicLinkVPCSecurityGroups"
            case blockDeviceMappings = "BlockDeviceMappings"
            case ebsOptimized = "EbsOptimized"
            case spotPrice = "SpotPrice"
            case kernelId = "KernelId"
            case instanceMonitoring = "InstanceMonitoring"
            case classicLinkVPCId = "ClassicLinkVPCId"
            case instanceType = "InstanceType"
            case createdTime = "CreatedTime"
            case placementTenancy = "PlacementTenancy"
            case securityGroups = "SecurityGroups"
            case keyName = "KeyName"
            case iamInstanceProfile = "IamInstanceProfile"
            case imageId = "ImageId"
            case ramdiskId = "RamdiskId"
            case associatePublicIpAddress = "AssociatePublicIpAddress"
        }
    }

    public struct DescribeTagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "Filters", required: false, type: .list)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// A filter used to scope the tags to return.
        public let filters: [Filter]?

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, filters: [Filter]? = nil) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.filters = filters
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case filters = "Filters"
        }
    }

    public struct PredefinedMetricSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "PredefinedMetricType", required: true, type: .enum),
            AWSShapeMember(label: "ResourceLabel", required: false, type: .string)
        ]
        /// The metric type.
        public let predefinedMetricType: MetricType
        /// Identifies the resource associated with the metric type. The following predefined metrics are available:    ASGAverageCPUUtilization - average CPU utilization of the Auto Scaling group    ASGAverageNetworkIn - average number of bytes received on all network interfaces by the Auto Scaling group    ASGAverageNetworkOut - average number of bytes sent out on all network interfaces by the Auto Scaling group    ALBRequestCountPerTarget - number of requests completed per target in an Application Load Balancer target group   For predefined metric types ASGAverageCPUUtilization, ASGAverageNetworkIn, and ASGAverageNetworkOut, the parameter must not be specified as the resource associated with the metric type is the Auto Scaling group. For predefined metric type ALBRequestCountPerTarget, the parameter must be specified in the format: app/load-balancer-name/load-balancer-id/targetgroup/target-group-name/target-group-id , where app/load-balancer-name/load-balancer-id  is the final portion of the load balancer ARN, and targetgroup/target-group-name/target-group-id  is the final portion of the target group ARN. The target group must be attached to the Auto Scaling group.
        public let resourceLabel: String?

        public init(predefinedMetricType: MetricType, resourceLabel: String? = nil) {
            self.predefinedMetricType = predefinedMetricType
            self.resourceLabel = resourceLabel
        }

        private enum CodingKeys: String, CodingKey {
            case predefinedMetricType = "PredefinedMetricType"
            case resourceLabel = "ResourceLabel"
        }
    }

    public struct BlockDeviceMapping: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "NoDevice", required: false, type: .boolean),
            AWSShapeMember(label: "VirtualName", required: false, type: .string),
            AWSShapeMember(label: "DeviceName", required: true, type: .string),
            AWSShapeMember(label: "Ebs", required: false, type: .structure)
        ]
        /// Suppresses a device mapping. If this parameter is true for the root device, the instance might fail the EC2 health check. Auto Scaling launches a replacement instance if the instance fails the health check.
        public let noDevice: Bool?
        /// The name of the virtual device (for example, ephemeral0).
        public let virtualName: String?
        /// The device name exposed to the EC2 instance (for example, /dev/sdh or xvdh).
        public let deviceName: String
        /// The information about the Amazon EBS volume.
        public let ebs: Ebs?

        public init(noDevice: Bool? = nil, virtualName: String? = nil, deviceName: String, ebs: Ebs? = nil) {
            self.noDevice = noDevice
            self.virtualName = virtualName
            self.deviceName = deviceName
            self.ebs = ebs
        }

        private enum CodingKeys: String, CodingKey {
            case noDevice = "NoDevice"
            case virtualName = "VirtualName"
            case deviceName = "DeviceName"
            case ebs = "Ebs"
        }
    }

    public struct DeleteAutoScalingGroupType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ForceDelete", required: false, type: .boolean),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// Specifies that the group will be deleted along with all instances associated with the group, without waiting for all instances to be terminated. This parameter also deletes any lifecycle actions associated with the group.
        public let forceDelete: Bool?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(forceDelete: Bool? = nil, autoScalingGroupName: String) {
            self.forceDelete = forceDelete
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case forceDelete = "ForceDelete"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct LaunchTemplateSpecification: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LaunchTemplateName", required: false, type: .string),
            AWSShapeMember(label: "LaunchTemplateId", required: false, type: .string),
            AWSShapeMember(label: "Version", required: false, type: .string)
        ]
        /// The name of the launch template. You must specify either a template name or a template ID.
        public let launchTemplateName: String?
        /// The ID of the launch template. You must specify either a template ID or a template name.
        public let launchTemplateId: String?
        /// The version number. By default, the default version of the launch template is used.
        public let version: String?

        public init(launchTemplateName: String? = nil, launchTemplateId: String? = nil, version: String? = nil) {
            self.launchTemplateName = launchTemplateName
            self.launchTemplateId = launchTemplateId
            self.version = version
        }

        private enum CodingKeys: String, CodingKey {
            case launchTemplateName = "LaunchTemplateName"
            case launchTemplateId = "LaunchTemplateId"
            case version = "Version"
        }
    }

    public struct RecordLifecycleActionHeartbeatType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "LifecycleHookName", required: true, type: .string),
            AWSShapeMember(label: "LifecycleActionToken", required: false, type: .string),
            AWSShapeMember(label: "InstanceId", required: false, type: .string)
        ]
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The name of the lifecycle hook.
        public let lifecycleHookName: String
        /// A token that uniquely identifies a specific lifecycle action associated with an instance. Auto Scaling sends this token to the notification target you specified when you created the lifecycle hook.
        public let lifecycleActionToken: String?
        /// The ID of the instance.
        public let instanceId: String?

        public init(autoScalingGroupName: String, lifecycleHookName: String, lifecycleActionToken: String? = nil, instanceId: String? = nil) {
            self.autoScalingGroupName = autoScalingGroupName
            self.lifecycleHookName = lifecycleHookName
            self.lifecycleActionToken = lifecycleActionToken
            self.instanceId = instanceId
        }

        private enum CodingKeys: String, CodingKey {
            case autoScalingGroupName = "AutoScalingGroupName"
            case lifecycleHookName = "LifecycleHookName"
            case lifecycleActionToken = "LifecycleActionToken"
            case instanceId = "InstanceId"
        }
    }

    public struct DescribeLoadBalancersRequest: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MaxRecords", required: false, type: .integer),
            AWSShapeMember(label: "NextToken", required: false, type: .string),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The maximum number of items to return with this call. The default value is 50 and the maximum value is 100.
        public let maxRecords: Int32?
        /// The token for the next set of items to return. (You received this token from a previous call.)
        public let nextToken: String?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(maxRecords: Int32? = nil, nextToken: String? = nil, autoScalingGroupName: String) {
            self.maxRecords = maxRecords
            self.nextToken = nextToken
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case maxRecords = "MaxRecords"
            case nextToken = "NextToken"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct PutScalingPolicyType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "MinAdjustmentStep", required: false, type: .integer),
            AWSShapeMember(label: "MetricAggregationType", required: false, type: .string),
            AWSShapeMember(label: "TargetTrackingConfiguration", required: false, type: .structure),
            AWSShapeMember(label: "PolicyName", required: true, type: .string),
            AWSShapeMember(label: "PolicyType", required: false, type: .string),
            AWSShapeMember(label: "AdjustmentType", required: false, type: .string),
            AWSShapeMember(label: "ScalingAdjustment", required: false, type: .integer),
            AWSShapeMember(label: "Cooldown", required: false, type: .integer),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "EstimatedInstanceWarmup", required: false, type: .integer),
            AWSShapeMember(label: "MinAdjustmentMagnitude", required: false, type: .integer),
            AWSShapeMember(label: "StepAdjustments", required: false, type: .list)
        ]
        /// Available for backward compatibility. Use MinAdjustmentMagnitude instead.
        public let minAdjustmentStep: Int32?
        /// The aggregation type for the CloudWatch metrics. The valid values are Minimum, Maximum, and Average. If the aggregation type is null, the value is treated as Average. This parameter is supported if the policy type is StepScaling.
        public let metricAggregationType: String?
        /// A target tracking policy. This parameter is required if the policy type is TargetTrackingScaling and not supported otherwise.
        public let targetTrackingConfiguration: TargetTrackingConfiguration?
        /// The name of the policy.
        public let policyName: String
        /// The policy type. The valid values are SimpleScaling, StepScaling, and TargetTrackingScaling. If the policy type is null, the value is treated as SimpleScaling.
        public let policyType: String?
        /// The adjustment type. The valid values are ChangeInCapacity, ExactCapacity, and PercentChangeInCapacity. This parameter is supported if the policy type is SimpleScaling or StepScaling. For more information, see Dynamic Scaling in the Auto Scaling User Guide.
        public let adjustmentType: String?
        /// The amount by which to scale, based on the specified adjustment type. A positive value adds to the current capacity while a negative number removes from the current capacity. This parameter is required if the policy type is SimpleScaling and not supported otherwise.
        public let scalingAdjustment: Int32?
        /// The amount of time, in seconds, after a scaling activity completes and before the next scaling activity can start. If this parameter is not specified, the default cooldown period for the group applies. This parameter is supported if the policy type is SimpleScaling. For more information, see Auto Scaling Cooldowns in the Auto Scaling User Guide.
        public let cooldown: Int32?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// The estimated time, in seconds, until a newly launched instance can contribute to the CloudWatch metrics. The default is to use the value specified for the default cooldown period for the group. This parameter is supported if the policy type is StepScaling or TargetTrackingScaling.
        public let estimatedInstanceWarmup: Int32?
        /// The minimum number of instances to scale. If the value of AdjustmentType is PercentChangeInCapacity, the scaling policy changes the DesiredCapacity of the Auto Scaling group by at least this many instances. Otherwise, the error is ValidationError. This parameter is supported if the policy type is SimpleScaling or StepScaling.
        public let minAdjustmentMagnitude: Int32?
        /// A set of adjustments that enable you to scale based on the size of the alarm breach. This parameter is required if the policy type is StepScaling and not supported otherwise.
        public let stepAdjustments: [StepAdjustment]?

        public init(minAdjustmentStep: Int32? = nil, metricAggregationType: String? = nil, targetTrackingConfiguration: TargetTrackingConfiguration? = nil, policyName: String, policyType: String? = nil, adjustmentType: String? = nil, scalingAdjustment: Int32? = nil, cooldown: Int32? = nil, autoScalingGroupName: String, estimatedInstanceWarmup: Int32? = nil, minAdjustmentMagnitude: Int32? = nil, stepAdjustments: [StepAdjustment]? = nil) {
            self.minAdjustmentStep = minAdjustmentStep
            self.metricAggregationType = metricAggregationType
            self.targetTrackingConfiguration = targetTrackingConfiguration
            self.policyName = policyName
            self.policyType = policyType
            self.adjustmentType = adjustmentType
            self.scalingAdjustment = scalingAdjustment
            self.cooldown = cooldown
            self.autoScalingGroupName = autoScalingGroupName
            self.estimatedInstanceWarmup = estimatedInstanceWarmup
            self.minAdjustmentMagnitude = minAdjustmentMagnitude
            self.stepAdjustments = stepAdjustments
        }

        private enum CodingKeys: String, CodingKey {
            case minAdjustmentStep = "MinAdjustmentStep"
            case metricAggregationType = "MetricAggregationType"
            case targetTrackingConfiguration = "TargetTrackingConfiguration"
            case policyName = "PolicyName"
            case policyType = "PolicyType"
            case adjustmentType = "AdjustmentType"
            case scalingAdjustment = "ScalingAdjustment"
            case cooldown = "Cooldown"
            case autoScalingGroupName = "AutoScalingGroupName"
            case estimatedInstanceWarmup = "EstimatedInstanceWarmup"
            case minAdjustmentMagnitude = "MinAdjustmentMagnitude"
            case stepAdjustments = "StepAdjustments"
        }
    }

    public struct SetInstanceProtectionQuery: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "ProtectedFromScaleIn", required: true, type: .boolean),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string),
            AWSShapeMember(label: "InstanceIds", required: true, type: .list)
        ]
        /// Indicates whether the instance is protected from termination by Auto Scaling when scaling in.
        public let protectedFromScaleIn: Bool
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String
        /// One or more instance IDs.
        public let instanceIds: [String]

        public init(protectedFromScaleIn: Bool, autoScalingGroupName: String, instanceIds: [String]) {
            self.protectedFromScaleIn = protectedFromScaleIn
            self.autoScalingGroupName = autoScalingGroupName
            self.instanceIds = instanceIds
        }

        private enum CodingKeys: String, CodingKey {
            case protectedFromScaleIn = "ProtectedFromScaleIn"
            case autoScalingGroupName = "AutoScalingGroupName"
            case instanceIds = "InstanceIds"
        }
    }

    public struct AttachLoadBalancersResultType: AWSShape {

    }

    public struct Filter: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Name", required: false, type: .string),
            AWSShapeMember(label: "Values", required: false, type: .list)
        ]
        /// The name of the filter. The valid values are: "auto-scaling-group", "key", "value", and "propagate-at-launch".
        public let name: String?
        /// The value of the filter.
        public let values: [String]?

        public init(name: String? = nil, values: [String]? = nil) {
            self.name = name
            self.values = values
        }

        private enum CodingKeys: String, CodingKey {
            case name = "Name"
            case values = "Values"
        }
    }

    public struct DescribeLifecycleHooksType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "LifecycleHookNames", required: false, type: .list),
            AWSShapeMember(label: "AutoScalingGroupName", required: true, type: .string)
        ]
        /// The names of one or more lifecycle hooks. If you omit this parameter, all lifecycle hooks are described.
        public let lifecycleHookNames: [String]?
        /// The name of the Auto Scaling group.
        public let autoScalingGroupName: String

        public init(lifecycleHookNames: [String]? = nil, autoScalingGroupName: String) {
            self.lifecycleHookNames = lifecycleHookNames
            self.autoScalingGroupName = autoScalingGroupName
        }

        private enum CodingKeys: String, CodingKey {
            case lifecycleHookNames = "LifecycleHookNames"
            case autoScalingGroupName = "AutoScalingGroupName"
        }
    }

    public struct CreateOrUpdateTagsType: AWSShape {
        public static var _members: [AWSShapeMember] = [
            AWSShapeMember(label: "Tags", required: true, type: .list)
        ]
        /// One or more tags.
        public let tags: [Tag]

        public init(tags: [Tag]) {
            self.tags = tags
        }

        private enum CodingKeys: String, CodingKey {
            case tags = "Tags"
        }
    }

}